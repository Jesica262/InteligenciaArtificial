!SESSION 2022-05-09 13:27:22.990 -----------------------------------------------
eclipse.buildId=4.23.0.I20220308-0310
java.version=11.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=es_AR
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

This is a continuation of log file C:\Users\Yesii\eclipse-workspace\.metadata\.bak_0.log
Created Time: 2022-05-09 13:29:49.314

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-09 13:29:49.315
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-09 13:29:49.318
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:29:51.690
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search;

import java.util.Random;
import frsf.cidisi.faia.agent.Perception;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;

public class EstadoPlanta extends SearchBasedAgentState {

    private int[][] matriz;
    private int[] posicionPlants;
    private int[] posicionInicial;
    private int cantidadSol;
    private int celdasVisitadasX;
    private int celdasVisitadasY;
    private int contadorZombie;
    private int zombieTotal;
    private int zombiePercibidos;

    public EstadoPlanta(int[][] m, int row, int col, int s, int cont, int z, int zp, int x, int y) {
        matriz = m;
        posicionPlants = new int[] {row,col};
        posicionInicial = new int[2];
        posicionInicial[0] = row;
        posicionInicial[1] = col;
        cantidadSol = s;
        contadorZombie = cont;
        celdasVisitadasX = x;
        celdasVisitadasY = y;
        zombieTotal = z;
        zombiePercibidos = zp;
    }

    public EstadoPlanta() {
    	
        matriz = new int[5][9];
        posicionPlants = new int[2];
        cantidadSol = 6;
        contadorZombie = 0;
        celdasVisitadasX = 0;
        celdasVisitadasY = 0;
        zombiePercibidos = 0;
          
        this.initState();
    }
    
    public static int numeroRandom(int min, int max) {
        
        Random random = new Random();

        int randomNum = random.nextInt((max - min) + 1) + min;

        return randomNum;
    }

    @Override
    public SearchBasedAgentState clone() {
    	
        int[][] newmatriz = new int[5][9];

        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                newmatriz[row][col] = matriz[row][col];
            }
        }

        int[] newPosition = new int[2];
        newPosition[0] = posicionPlants[0];
        newPosition[1] = posicionPlants[1];

        EstadoPlanta newState = new EstadoPlanta(newmatriz, this.getRowPosition(),
        										 this.getColumnPosition(), this.cantidadSol, 
        										 this.contadorZombie, this.zombieTotal, 
        										 this.zombiePercibidos, this.celdasVisitadasX,
        										 this.celdasVisitadasY);
   
        return newState;
    }

    @Override
    public void updateState(Perception p) {
    	
        PercepcionPlanta plantsPerception = (PercepcionPlanta) p;

        int row = this.getRowPosition();
        int col = this.getColumnPosition();
        
        // Muestra la información que se encuentra en la fila y columna.
    	int i = col;

		for (Integer valor : plantsPerception.getSensorFilaDerecha()) 
		{ 
			matriz[row][i] = valor.intValue();
		
			if( matriz[row][i] >= 1 && matriz[row][i] <= 5)
			{
				zombiePercibidos++;
			}
			i++;
		}
		
<<<<<<< HEAD
		i = col;
		
		for (Integer valor : plantsPerception.getSensorFilaIzquierda()) 
=======
		int j = col;
			
		for (Integer valor : plantsPerception.getSensorFilaIzquierda()) 
>>>>>>> jesica-develop
		{ 
			matriz[row][j] = valor.intValue();
			
			if( matriz[row][j] >= 1 && matriz[row][j] <= 5)
			{
				zombiePercibidos++;
			}
			j--;
		}
		
<<<<<<< HEAD
		i = row;
=======
		int k = row;
>>>>>>> jesica-develop

		for (Integer valor : plantsPerception.getSensorColumnaArriba()) 
		{ 
			matriz[k][col] = valor.intValue();
			
			if(matriz[k][col] >= 1 && matriz[k][col] <= 5)
			{
				zombiePercibidos++;
			}
			k++;
		}

		int m = row;
		
		for (Integer valor : plantsPerception.getSensorColumnaAbajo()) 
		{ 
			matriz[m][col] = valor.intValue();
			
			if(matriz[m][col] >= 1 && matriz[m][col] <= 5)
			{
				zombiePercibidos++;
			}
			m--;
		}
		
        int cantSoles = this.getCantidadSol();
        int contadorZombie = plantsPerception.getContZombie();
        int celdasx = plantsPerception.getCeldasVisitadasX();
        int celdasy = plantsPerception.getCeldasVisitadasY();
        int zombieTotal = plantsPerception.getZombieTotal();
      //  int zombiePercibido = plantsPerception.getZombiePercibido();
        this.celdasVisitadasX = celdasx;
        this.celdasVisitadasX = celdasy;
        this.contadorZombie = contadorZombie;
        this.cantidadSol = cantSoles;
        this.zombieTotal = zombieTotal;
       // this.zombiePercibidos = zombiePercibido;
    }

    @Override
    public void initState() {
    
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                matriz[row][col] = PercepcionPlanta.PERCEPCION_VACIO;
            }
        }
        
        this.setRowPosition(0);
        this.setColumnPosition(0);
        this.setCantidadSol(10);
        this.setContadorZombie(0);
    }
    
  public void initStateNuevamente(int row, int col) {
    	
    	Random random = new Random();
    	
        for (row = 0; row < matriz.length; row++) {
            for (col = 0; col < matriz[0].length; col++) {
                matriz[row][col] = PercepcionPlanta.PERCEPCION_VACIO;
            }
        }
    }

    /**
     * This method returns the String representation of the agent state.
     */
    @Override
    public String toString() {
    	  
    	String str = "";

    	str += "\n\n Posicion: [" + this.getRowPosition() + "," + "" + this.getColumnPosition() + "]\n";
        str += " Cantidad de Soles: " + this.getCantidadSol() + "\n";
        str += " Zombie muertos: " + this.contadorZombie + "\n";
        str += " Total zombie: " + this.getZombieTotal() + "\n";
        str += " Zombie Percibidos: " + this.getZombiePercibidos() + "\n";
        str += " Cantidad celdas visitadas en X: " + this.getCeldasVisitadasX() + "\n";
        str += " Cantidad celdas visitadas en Y: " + this.getCeldasVisitadasY() + "\n";

        str = str + "\n";
        for (int row = 0; row < matriz.length; row++) {
            str += "| ";
            for (int col = 0; col < matriz[0].length; col++) {
            	
<<<<<<< HEAD
            	 if (matriz[row][col] == PercepcionPlanta.PERCEPCION_DESCONOCIDO) {
                     str += "x ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_VACIO) { 
                 	str +=  "_ ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1) {
                 	str += "z1 ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2) {
                 	str += "z2 ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3) {
                 	str += "z3 ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4) {
                 	str += "z4 ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5) {
                 	str += "z5 ";
             	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_1SOL){
             		str += "* ";
             	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_2SOL){
             		str += "** ";
             	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_3SOL){
             		str += "*** ";
             	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL){
             		str += "o ";
             	} else {
             		str += matriz[row][col] + " ";
                 }
=======
                if (matriz[row][col] == PercepcionPlanta.PERCEPCION_DESCONOCIDO) {
                    str += "x ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_VACIO) { 
                	str +=  "_ ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1) {
                	str += "z1 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2) {
                	str += "z2 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3) {
                	str += "z3 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4) {
                	str += "z4 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5) {
                	str += "z5 ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1){
            		str += "* ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL2){
            		str += "** ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3){
            		str += "*** ";
            	} else {
            		str += matriz[row][col] + " ";
                }
>>>>>>> jesica-develop
            }
            str = str + " |\n";
        }
        str = str + " ";

        return str;
    }

    /**
     * This method is used in the search process to verify if the node already
     * exists in the actual search.
     */
    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof EstadoPlanta))
            return false;

        int[][] matrizObj = ((EstadoPlanta) obj).getMatriz();
        int[] positionObj = ((EstadoPlanta) obj).getPosition();
        int sol = ((EstadoPlanta) obj).getCantidadSol();

        if (!(sol == this.getCantidadSol())) {
        	return false;
        }
        
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                if (matriz[row][col] != matrizObj[row][col]) {
                    return false;
                }
            }
        }

        if (posicionPlants[0] != positionObj[0] || posicionPlants[1] != positionObj[1]) {
            return false;
        }
        
        return true;
    }

    public int numeroRandomGirasol()
    {
    	return numeroRandom(1,3);
    }
    
    public int getmatrizPosition(int row, int col) {
        return matriz[row][col];
    }

    public void setmatrizPosition(int row, int col, int value) {
        this.matriz[row][col] = value;
    }

    public int[] getPosition() {
        return posicionPlants;
    }

    public void setRowPosition(int value) {
        this.posicionPlants[0] = value;
    }

    public void setColumnPosition(int value) {
        this.posicionPlants[1] = value;
    }

    public int getRowPosition() {
        return posicionPlants[0];
    }

    public int getColumnPosition() {
        return posicionPlants[1];
    }
    
    public int[][] getMatriz() {
		return matriz;
	}

	public void setMatriz(int[][] matriz) {
		this.matriz = matriz;
	}

	public int[] getPosicionPlants() {
		return posicionPlants;
	}

	public void setPosicionPlants(int[] posicionPlants) {
		this.posicionPlants = posicionPlants;
	}

	public int[] getPosicionInicial() {
		return posicionInicial;
	}

	public void setPosicionInicial(int[] posicionInicial) {
		this.posicionInicial = posicionInicial;
	}

	public int getCantidadSol() {
		return cantidadSol;
	}

	public void setCantidadSol(int cantidadSol) {
		this.cantidadSol = cantidadSol;
	}


   public boolean isNoMoreZombie() {
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                if ( matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5 ) {
                	
                    return false;
                }
            }
        }
        return true;
    }
   
   public boolean hayZombie(int row, int col) {
      
	   if ( matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5 ) {
                  
		   return true;
       }
       return false;
   }
    
    public boolean tengoSol()
    {
    	return (this.cantidadSol>0);
    }
    
    public int getVisitedCellsCount() {
        return celdasVisitadasX;
    }

	public boolean isAllmatrizKnown() {

	        for (int col = 0; col < matriz[0].length; col++) {
	            if (matriz[0][col] == PercepcionPlanta.PERCEPCION_VACIO) {
	            	
	                return false;
	            }	    
	        }
  
	    return true;
	}
	
	
<<<<<<< HEAD
	public int incrementarSol(int row, int col)
	{
		int cantSol = 0;
		
		if (matriz[row][col] == PercepcionPlanta.PERCEPCION_1SOL)
		{
			cantSol = 1;
		}
		else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_2SOL)
		{
			cantSol = 2;
		}
		else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_3SOL)
		{
			cantSol = 3;
		}
		return cantSol;
=======
	public int incrementarSol(int row,int col)
	{
		int sol = 0;
		
		if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1)
		{
			sol = 1;
		}
		else if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1)
		{
			sol = 2;
		}
		else if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3)
		{
			sol = 3;
		}
		return sol;
>>>>>>> jesica-develop
	}
	
	public boolean haySol(int row, int col)
	{
<<<<<<< HEAD
		return (matriz[row][col] == PercepcionPlanta.PERCEPCION_1SOL ||
				matriz[row][col] == PercepcionPlanta.PERCEPCION_2SOL ||
				matriz[row][col] == PercepcionPlanta.PERCEPCION_3SOL);
=======
		return (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1
				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL2
				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3);
>>>>>>> jesica-develop
	}

	public int getContadorZombie() {
		return contadorZombie;
	}

	public void setContadorZombie(int contadorZombie) {
		this.contadorZombie = contadorZombie;
	}

	public int getZombieTotal() {
		return zombieTotal;
	}

	public void setZombieTotal(int zombieTotal) {
		this.zombieTotal = zombieTotal;
	}

	public int getZombiePercibidos() {
		return zombiePercibidos;
	}

	public void setZombiePercibidos(int zombiePercibidos) {
		this.zombiePercibidos = zombiePercibidos;
	}

	public int getCeldasVisitadasX() {
		return celdasVisitadasX;
	}

	public void setCeldasVisitadasX(int celdasVisitadasX) {
		this.celdasVisitadasX = celdasVisitadasX;
	}

	public int getCeldasVisitadasY() {
		return celdasVisitadasY;
	}

	public void setCeldasVisitadasY(int celdasVisitadasY) {
		this.celdasVisitadasY = celdasVisitadasY;
	}
	
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-09 13:29:51.692
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-09 13:29:51.694
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:29:56.263
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search;

import java.util.Random;
import frsf.cidisi.faia.agent.Perception;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;

public class EstadoPlanta extends SearchBasedAgentState {

    private int[][] matriz;
    private int[] posicionPlants;
    private int[] posicionInicial;
    private int cantidadSol;
    private int celdasVisitadasX;
    private int celdasVisitadasY;
    private int contadorZombie;
    private int zombieTotal;
    private int zombiePercibidos;

    public EstadoPlanta(int[][] m, int row, int col, int s, int cont, int z, int zp, int x, int y) {
        matriz = m;
        posicionPlants = new int[] {row,col};
        posicionInicial = new int[2];
        posicionInicial[0] = row;
        posicionInicial[1] = col;
        cantidadSol = s;
        contadorZombie = cont;
        celdasVisitadasX = x;
        celdasVisitadasY = y;
        zombieTotal = z;
        zombiePercibidos = zp;
    }

    public EstadoPlanta() {
    	
        matriz = new int[5][9];
        posicionPlants = new int[2];
        cantidadSol = 6;
        contadorZombie = 0;
        celdasVisitadasX = 0;
        celdasVisitadasY = 0;
        zombiePercibidos = 0;
          
        this.initState();
    }
    
    public static int numeroRandom(int min, int max) {
        
        Random random = new Random();

        int randomNum = random.nextInt((max - min) + 1) + min;

        return randomNum;
    }

    @Override
    public SearchBasedAgentState clone() {
    	
        int[][] newmatriz = new int[5][9];

        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                newmatriz[row][col] = matriz[row][col];
            }
        }

        int[] newPosition = new int[2];
        newPosition[0] = posicionPlants[0];
        newPosition[1] = posicionPlants[1];

        EstadoPlanta newState = new EstadoPlanta(newmatriz, this.getRowPosition(),
        										 this.getColumnPosition(), this.cantidadSol, 
        										 this.contadorZombie, this.zombieTotal, 
        										 this.zombiePercibidos, this.celdasVisitadasX,
        										 this.celdasVisitadasY);
   
        return newState;
    }

    @Override
    public void updateState(Perception p) {
    	
        PercepcionPlanta plantsPerception = (PercepcionPlanta) p;

        int row = this.getRowPosition();
        int col = this.getColumnPosition();
        
        // Muestra la información que se encuentra en la fila y columna.
    	int i = col;

		for (Integer valor : plantsPerception.getSensorFilaDerecha()) 
		{ 
			matriz[row][i] = valor.intValue();
		
			if( matriz[row][i] >= 1 && matriz[row][i] <= 5)
			{
				zombiePercibidos++;
			}
			i++;
		}
		
<<<<<<< HEAD
		i = col;
		
		for (Integer valor : plantsPerception.getSensorFilaIzquierda()) 
=======
		int j = col;
			
		for (Integer valor : plantsPerception.getSensorFilaIzquierda()) 
>>>>>>> jesica-develop
		{ 
			matriz[row][j] = valor.intValue();
			
			if( matriz[row][j] >= 1 && matriz[row][j] <= 5)
			{
				zombiePercibidos++;
			}
			j--;
		}
		
<<<<<<< HEAD
		i = row;
=======
		int k = row;
>>>>>>> jesica-develop

		for (Integer valor : plantsPerception.getSensorColumnaArriba()) 
		{ 
			matriz[k][col] = valor.intValue();
			
			if(matriz[k][col] >= 1 && matriz[k][col] <= 5)
			{
				zombiePercibidos++;
			}
			k++;
		}

		int m = row;
		
		for (Integer valor : plantsPerception.getSensorColumnaAbajo()) 
		{ 
			matriz[m][col] = valor.intValue();
			
			if(matriz[m][col] >= 1 && matriz[m][col] <= 5)
			{
				zombiePercibidos++;
			}
			m--;
		}
		
        int cantSoles = this.getCantidadSol();
        int contadorZombie = plantsPerception.getContZombie();
        int celdasx = plantsPerception.getCeldasVisitadasX();
        int celdasy = plantsPerception.getCeldasVisitadasY();
        int zombieTotal = plantsPerception.getZombieTotal();
      //  int zombiePercibido = plantsPerception.getZombiePercibido();
        this.celdasVisitadasX = celdasx;
        this.celdasVisitadasX = celdasy;
        this.contadorZombie = contadorZombie;
        this.cantidadSol = cantSoles;
        this.zombieTotal = zombieTotal;
       // this.zombiePercibidos = zombiePercibido;
    }

    @Override
    public void initState() {
    
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                matriz[row][col] = PercepcionPlanta.PERCEPCION_VACIO;
            }
        }
        
        this.setRowPosition(0);
        this.setColumnPosition(0);
        this.setCantidadSol(10);
        this.setContadorZombie(0);
    }
    
  public void initStateNuevamente(int row, int col) {
    	
    	Random random = new Random();
    	
        for (row = 0; row < matriz.length; row++) {
            for (col = 0; col < matriz[0].length; col++) {
                matriz[row][col] = PercepcionPlanta.PERCEPCION_VACIO;
            }
        }
    }

    /**
     * This method returns the String representation of the agent state.
     */
    @Override
    public String toString() {
    	  
    	String str = "";

    	str += "\n\n Posicion: [" + this.getRowPosition() + "," + "" + this.getColumnPosition() + "]\n";
        str += " Cantidad de Soles: " + this.getCantidadSol() + "\n";
        str += " Zombie muertos: " + this.contadorZombie + "\n";
        str += " Total zombie: " + this.getZombieTotal() + "\n";
        str += " Zombie Percibidos: " + this.getZombiePercibidos() + "\n";
        str += " Cantidad celdas visitadas en X: " + this.getCeldasVisitadasX() + "\n";
        str += " Cantidad celdas visitadas en Y: " + this.getCeldasVisitadasY() + "\n";

        str = str + "\n";
        for (int row = 0; row < matriz.length; row++) {
            str += "| ";
            for (int col = 0; col < matriz[0].length; col++) {
            	
<<<<<<< HEAD
            	 if (matriz[row][col] == PercepcionPlanta.PERCEPCION_DESCONOCIDO) {
                     str += "x ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_VACIO) { 
                 	str +=  "_ ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1) {
                 	str += "z1 ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2) {
                 	str += "z2 ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3) {
                 	str += "z3 ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4) {
                 	str += "z4 ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5) {
                 	str += "z5 ";
             	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_1SOL){
             		str += "* ";
             	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_2SOL){
             		str += "** ";
             	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_3SOL){
             		str += "*** ";
             	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL){
             		str += "o ";
             	} else {
             		str += matriz[row][col] + " ";
                 }
=======
                if (matriz[row][col] == PercepcionPlanta.PERCEPCION_DESCONOCIDO) {
                    str += "x ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_VACIO) { 
                	str +=  "_ ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1) {
                	str += "z1 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2) {
                	str += "z2 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3) {
                	str += "z3 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4) {
                	str += "z4 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5) {
                	str += "z5 ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1){
            		str += "* ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL2){
            		str += "** ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3){
            		str += "*** ";
            	} else {
            		str += matriz[row][col] + " ";
                }
>>>>>>> jesica-develop
            }
            str = str + " |\n";
        }
        str = str + " ";

        return str;
    }

    /**
     * This method is used in the search process to verify if the node already
     * exists in the actual search.
     */
    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof EstadoPlanta))
            return false;

        int[][] matrizObj = ((EstadoPlanta) obj).getMatriz();
        int[] positionObj = ((EstadoPlanta) obj).getPosition();
        int sol = ((EstadoPlanta) obj).getCantidadSol();

        if (!(sol == this.getCantidadSol())) {
        	return false;
        }
        
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                if (matriz[row][col] != matrizObj[row][col]) {
                    return false;
                }
            }
        }

        if (posicionPlants[0] != positionObj[0] || posicionPlants[1] != positionObj[1]) {
            return false;
        }
        
        return true;
    }

    public int numeroRandomGirasol()
    {
    	return numeroRandom(1,3);
    }
    
    public int getmatrizPosition(int row, int col) {
        return matriz[row][col];
    }

    public void setmatrizPosition(int row, int col, int value) {
        this.matriz[row][col] = value;
    }

    public int[] getPosition() {
        return posicionPlants;
    }

    public void setRowPosition(int value) {
        this.posicionPlants[0] = value;
    }

    public void setColumnPosition(int value) {
        this.posicionPlants[1] = value;
    }

    public int getRowPosition() {
        return posicionPlants[0];
    }

    public int getColumnPosition() {
        return posicionPlants[1];
    }
    
    public int[][] getMatriz() {
		return matriz;
	}

	public void setMatriz(int[][] matriz) {
		this.matriz = matriz;
	}

	public int[] getPosicionPlants() {
		return posicionPlants;
	}

	public void setPosicionPlants(int[] posicionPlants) {
		this.posicionPlants = posicionPlants;
	}

	public int[] getPosicionInicial() {
		return posicionInicial;
	}

	public void setPosicionInicial(int[] posicionInicial) {
		this.posicionInicial = posicionInicial;
	}

	public int getCantidadSol() {
		return cantidadSol;
	}

	public void setCantidadSol(int cantidadSol) {
		this.cantidadSol = cantidadSol;
	}


   public boolean isNoMoreZombie() {
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                if ( matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5 ) {
                	
                    return false;
                }
            }
        }
        return true;
    }
   
   public boolean hayZombie(int row, int col) {
      
	   if ( matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5 ) {
                  
		   return true;
       }
       return false;
   }
    
    public boolean tengoSol()
    {
    	return (this.cantidadSol>0);
    }
    
    public int getVisitedCellsCount() {
        return celdasVisitadasX;
    }

	public boolean isAllmatrizKnown() {

	        for (int col = 0; col < matriz[0].length; col++) {
	            if (matriz[0][col] == PercepcionPlanta.PERCEPCION_VACIO) {
	            	
	                return false;
	            }	    
	        }
  
	    return true;
	}
	
	
<<<<<<< HEAD
	public int incrementarSol(int row, int col)
	{
		int cantSol = 0;
		
		if (matriz[row][col] == PercepcionPlanta.PERCEPCION_1SOL)
		{
			cantSol = 1;
		}
		else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_2SOL)
		{
			cantSol = 2;
		}
		else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_3SOL)
		{
			cantSol = 3;
		}
		return cantSol;
=======
	public int incrementarSol(int row,int col)
	{
		int sol = 0;
		
		if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1)
		{
			sol = 1;
		}
		else if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1)
		{
			sol = 2;
		}
		else if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3)
		{
			sol = 3;
		}
		return sol;
>>>>>>> jesica-develop
	}
	
	public boolean haySol(int row, int col)
	{
<<<<<<< HEAD
		return (matriz[row][col] == PercepcionPlanta.PERCEPCION_1SOL ||
				matriz[row][col] == PercepcionPlanta.PERCEPCION_2SOL ||
				matriz[row][col] == PercepcionPlanta.PERCEPCION_3SOL);
=======
		return (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1
				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL2
				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3);
>>>>>>> jesica-develop
	}

	public int getContadorZombie() {
		return contadorZombie;
	}

	public void setContadorZombie(int contadorZombie) {
		this.contadorZombie = contadorZombie;
	}

	public int getZombieTotal() {
		return zombieTotal;
	}

	public void setZombieTotal(int zombieTotal) {
		this.zombieTotal = zombieTotal;
	}

	public int getZombiePercibidos() {
		return zombiePercibidos;
	}

	public void setZombiePercibidos(int zombiePercibidos) {
		this.zombiePercibidos = zombiePercibidos;
	}

	public int getCeldasVisitadasX() {
		return celdasVisitadasX;
	}

	public void setCeldasVisitadasX(int celdasVisitadasX) {
		this.celdasVisitadasX = celdasVisitadasX;
	}

	public int getCeldasVisitadasY() {
		return celdasVisitadasY;
	}

	public void setCeldasVisitadasY(int celdasVisitadasY) {
		this.celdasVisitadasY = celdasVisitadasY;
	}
	
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-09 13:29:56.265
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-09 13:29:56.266
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:30:10.807
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search;

import java.util.Random;
import frsf.cidisi.faia.agent.Perception;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;

public class EstadoPlanta extends SearchBasedAgentState {

    private int[][] matriz;
    private int[] posicionPlants;
    private int[] posicionInicial;
    private int cantidadSol;
    private int celdasVisitadasX;
    private int celdasVisitadasY;
    private int contadorZombie;
    private int zombieTotal;
    private int zombiePercibidos;

    public EstadoPlanta(int[][] m, int row, int col, int s, int cont, int z, int zp, int x, int y) {
        matriz = m;
        posicionPlants = new int[] {row,col};
        posicionInicial = new int[2];
        posicionInicial[0] = row;
        posicionInicial[1] = col;
        cantidadSol = s;
        contadorZombie = cont;
        celdasVisitadasX = x;
        celdasVisitadasY = y;
        zombieTotal = z;
        zombiePercibidos = zp;
    }

    public EstadoPlanta() {
    	
        matriz = new int[5][9];
        posicionPlants = new int[2];
        cantidadSol = 6;
        contadorZombie = 0;
        celdasVisitadasX = 0;
        celdasVisitadasY = 0;
        zombiePercibidos = 0;
          
        this.initState();
    }
    
    public static int numeroRandom(int min, int max) {
        
        Random random = new Random();

        int randomNum = random.nextInt((max - min) + 1) + min;

        return randomNum;
    }

    @Override
    public SearchBasedAgentState clone() {
    	
        int[][] newmatriz = new int[5][9];

        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                newmatriz[row][col] = matriz[row][col];
            }
        }

        int[] newPosition = new int[2];
        newPosition[0] = posicionPlants[0];
        newPosition[1] = posicionPlants[1];

        EstadoPlanta newState = new EstadoPlanta(newmatriz, this.getRowPosition(),
        										 this.getColumnPosition(), this.cantidadSol, 
        										 this.contadorZombie, this.zombieTotal, 
        										 this.zombiePercibidos, this.celdasVisitadasX,
        										 this.celdasVisitadasY);
   
        return newState;
    }

    @Override
    public void updateState(Perception p) {
    	
        PercepcionPlanta plantsPerception = (PercepcionPlanta) p;

        int row = this.getRowPosition();
        int col = this.getColumnPosition();
        
        // Muestra la información que se encuentra en la fila y columna.
    	int i = col;

		for (Integer valor : plantsPerception.getSensorFilaDerecha()) 
		{ 
			matriz[row][i] = valor.intValue();
		
			if( matriz[row][i] >= 1 && matriz[row][i] <= 5)
			{
				zombiePercibidos++;
			}
			i++;
		}

		int j = col;
			
		for (Integer valor : plantsPerception.getSensorFilaIzquierda()) 
>>>>>>> jesica-develop
		{ 
			matriz[row][j] = valor.intValue();
			
			if( matriz[row][j] >= 1 && matriz[row][j] <= 5)
			{
				zombiePercibidos++;
			}
			j--;
		}
		
<<<<<<< HEAD
		i = row;
=======
		int k = row;
>>>>>>> jesica-develop

		for (Integer valor : plantsPerception.getSensorColumnaArriba()) 
		{ 
			matriz[k][col] = valor.intValue();
			
			if(matriz[k][col] >= 1 && matriz[k][col] <= 5)
			{
				zombiePercibidos++;
			}
			k++;
		}

		int m = row;
		
		for (Integer valor : plantsPerception.getSensorColumnaAbajo()) 
		{ 
			matriz[m][col] = valor.intValue();
			
			if(matriz[m][col] >= 1 && matriz[m][col] <= 5)
			{
				zombiePercibidos++;
			}
			m--;
		}
		
        int cantSoles = this.getCantidadSol();
        int contadorZombie = plantsPerception.getContZombie();
        int celdasx = plantsPerception.getCeldasVisitadasX();
        int celdasy = plantsPerception.getCeldasVisitadasY();
        int zombieTotal = plantsPerception.getZombieTotal();
      //  int zombiePercibido = plantsPerception.getZombiePercibido();
        this.celdasVisitadasX = celdasx;
        this.celdasVisitadasX = celdasy;
        this.contadorZombie = contadorZombie;
        this.cantidadSol = cantSoles;
        this.zombieTotal = zombieTotal;
       // this.zombiePercibidos = zombiePercibido;
    }

    @Override
    public void initState() {
    
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                matriz[row][col] = PercepcionPlanta.PERCEPCION_VACIO;
            }
        }
        
        this.setRowPosition(0);
        this.setColumnPosition(0);
        this.setCantidadSol(10);
        this.setContadorZombie(0);
    }
    
  public void initStateNuevamente(int row, int col) {
    	
    	Random random = new Random();
    	
        for (row = 0; row < matriz.length; row++) {
            for (col = 0; col < matriz[0].length; col++) {
                matriz[row][col] = PercepcionPlanta.PERCEPCION_VACIO;
            }
        }
    }

    /**
     * This method returns the String representation of the agent state.
     */
    @Override
    public String toString() {
    	  
    	String str = "";

    	str += "\n\n Posicion: [" + this.getRowPosition() + "," + "" + this.getColumnPosition() + "]\n";
        str += " Cantidad de Soles: " + this.getCantidadSol() + "\n";
        str += " Zombie muertos: " + this.contadorZombie + "\n";
        str += " Total zombie: " + this.getZombieTotal() + "\n";
        str += " Zombie Percibidos: " + this.getZombiePercibidos() + "\n";
        str += " Cantidad celdas visitadas en X: " + this.getCeldasVisitadasX() + "\n";
        str += " Cantidad celdas visitadas en Y: " + this.getCeldasVisitadasY() + "\n";

        str = str + "\n";
        for (int row = 0; row < matriz.length; row++) {
            str += "| ";
            for (int col = 0; col < matriz[0].length; col++) {
            	
<<<<<<< HEAD
            	 if (matriz[row][col] == PercepcionPlanta.PERCEPCION_DESCONOCIDO) {
                     str += "x ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_VACIO) { 
                 	str +=  "_ ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1) {
                 	str += "z1 ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2) {
                 	str += "z2 ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3) {
                 	str += "z3 ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4) {
                 	str += "z4 ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5) {
                 	str += "z5 ";
             	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_1SOL){
             		str += "* ";
             	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_2SOL){
             		str += "** ";
             	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_3SOL){
             		str += "*** ";
             	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL){
             		str += "o ";
             	} else {
             		str += matriz[row][col] + " ";
                 }
=======
                if (matriz[row][col] == PercepcionPlanta.PERCEPCION_DESCONOCIDO) {
                    str += "x ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_VACIO) { 
                	str +=  "_ ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1) {
                	str += "z1 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2) {
                	str += "z2 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3) {
                	str += "z3 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4) {
                	str += "z4 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5) {
                	str += "z5 ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1){
            		str += "* ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL2){
            		str += "** ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3){
            		str += "*** ";
            	} else {
            		str += matriz[row][col] + " ";
                }
>>>>>>> jesica-develop
            }
            str = str + " |\n";
        }
        str = str + " ";

        return str;
    }

    /**
     * This method is used in the search process to verify if the node already
     * exists in the actual search.
     */
    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof EstadoPlanta))
            return false;

        int[][] matrizObj = ((EstadoPlanta) obj).getMatriz();
        int[] positionObj = ((EstadoPlanta) obj).getPosition();
        int sol = ((EstadoPlanta) obj).getCantidadSol();

        if (!(sol == this.getCantidadSol())) {
        	return false;
        }
        
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                if (matriz[row][col] != matrizObj[row][col]) {
                    return false;
                }
            }
        }

        if (posicionPlants[0] != positionObj[0] || posicionPlants[1] != positionObj[1]) {
            return false;
        }
        
        return true;
    }

    public int numeroRandomGirasol()
    {
    	return numeroRandom(1,3);
    }
    
    public int getmatrizPosition(int row, int col) {
        return matriz[row][col];
    }

    public void setmatrizPosition(int row, int col, int value) {
        this.matriz[row][col] = value;
    }

    public int[] getPosition() {
        return posicionPlants;
    }

    public void setRowPosition(int value) {
        this.posicionPlants[0] = value;
    }

    public void setColumnPosition(int value) {
        this.posicionPlants[1] = value;
    }

    public int getRowPosition() {
        return posicionPlants[0];
    }

    public int getColumnPosition() {
        return posicionPlants[1];
    }
    
    public int[][] getMatriz() {
		return matriz;
	}

	public void setMatriz(int[][] matriz) {
		this.matriz = matriz;
	}

	public int[] getPosicionPlants() {
		return posicionPlants;
	}

	public void setPosicionPlants(int[] posicionPlants) {
		this.posicionPlants = posicionPlants;
	}

	public int[] getPosicionInicial() {
		return posicionInicial;
	}

	public void setPosicionInicial(int[] posicionInicial) {
		this.posicionInicial = posicionInicial;
	}

	public int getCantidadSol() {
		return cantidadSol;
	}

	public void setCantidadSol(int cantidadSol) {
		this.cantidadSol = cantidadSol;
	}


   public boolean isNoMoreZombie() {
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                if ( matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5 ) {
                	
                    return false;
                }
            }
        }
        return true;
    }
   
   public boolean hayZombie(int row, int col) {
      
	   if ( matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5 ) {
                  
		   return true;
       }
       return false;
   }
    
    public boolean tengoSol()
    {
    	return (this.cantidadSol>0);
    }
    
    public int getVisitedCellsCount() {
        return celdasVisitadasX;
    }

	public boolean isAllmatrizKnown() {

	        for (int col = 0; col < matriz[0].length; col++) {
	            if (matriz[0][col] == PercepcionPlanta.PERCEPCION_VACIO) {
	            	
	                return false;
	            }	    
	        }
  
	    return true;
	}
	
	
<<<<<<< HEAD
	public int incrementarSol(int row, int col)
	{
		int cantSol = 0;
		
		if (matriz[row][col] == PercepcionPlanta.PERCEPCION_1SOL)
		{
			cantSol = 1;
		}
		else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_2SOL)
		{
			cantSol = 2;
		}
		else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_3SOL)
		{
			cantSol = 3;
		}
		return cantSol;
=======
	public int incrementarSol(int row,int col)
	{
		int sol = 0;
		
		if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1)
		{
			sol = 1;
		}
		else if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1)
		{
			sol = 2;
		}
		else if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3)
		{
			sol = 3;
		}
		return sol;
>>>>>>> jesica-develop
	}
	
	public boolean haySol(int row, int col)
	{
<<<<<<< HEAD
		return (matriz[row][col] == PercepcionPlanta.PERCEPCION_1SOL ||
				matriz[row][col] == PercepcionPlanta.PERCEPCION_2SOL ||
				matriz[row][col] == PercepcionPlanta.PERCEPCION_3SOL);
=======
		return (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1
				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL2
				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3);
>>>>>>> jesica-develop
	}

	public int getContadorZombie() {
		return contadorZombie;
	}

	public void setContadorZombie(int contadorZombie) {
		this.contadorZombie = contadorZombie;
	}

	public int getZombieTotal() {
		return zombieTotal;
	}

	public void setZombieTotal(int zombieTotal) {
		this.zombieTotal = zombieTotal;
	}

	public int getZombiePercibidos() {
		return zombiePercibidos;
	}

	public void setZombiePercibidos(int zombiePercibidos) {
		this.zombiePercibidos = zombiePercibidos;
	}

	public int getCeldasVisitadasX() {
		return celdasVisitadasX;
	}

	public void setCeldasVisitadasX(int celdasVisitadasX) {
		this.celdasVisitadasX = celdasVisitadasX;
	}

	public int getCeldasVisitadasY() {
		return celdasVisitadasY;
	}

	public void setCeldasVisitadasY(int celdasVisitadasY) {
		this.celdasVisitadasY = celdasVisitadasY;
	}
	
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-09 13:30:10.809
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-09 13:30:10.810
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:30:14.474
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search;

import java.util.Random;
import frsf.cidisi.faia.agent.Perception;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;

public class EstadoPlanta extends SearchBasedAgentState {

    private int[][] matriz;
    private int[] posicionPlants;
    private int[] posicionInicial;
    private int cantidadSol;
    private int celdasVisitadasX;
    private int celdasVisitadasY;
    private int contadorZombie;
    private int zombieTotal;
    private int zombiePercibidos;

    public EstadoPlanta(int[][] m, int row, int col, int s, int cont, int z, int zp, int x, int y) {
        matriz = m;
        posicionPlants = new int[] {row,col};
        posicionInicial = new int[2];
        posicionInicial[0] = row;
        posicionInicial[1] = col;
        cantidadSol = s;
        contadorZombie = cont;
        celdasVisitadasX = x;
        celdasVisitadasY = y;
        zombieTotal = z;
        zombiePercibidos = zp;
    }

    public EstadoPlanta() {
    	
        matriz = new int[5][9];
        posicionPlants = new int[2];
        cantidadSol = 6;
        contadorZombie = 0;
        celdasVisitadasX = 0;
        celdasVisitadasY = 0;
        zombiePercibidos = 0;
          
        this.initState();
    }
    
    public static int numeroRandom(int min, int max) {
        
        Random random = new Random();

        int randomNum = random.nextInt((max - min) + 1) + min;

        return randomNum;
    }

    @Override
    public SearchBasedAgentState clone() {
    	
        int[][] newmatriz = new int[5][9];

        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                newmatriz[row][col] = matriz[row][col];
            }
        }

        int[] newPosition = new int[2];
        newPosition[0] = posicionPlants[0];
        newPosition[1] = posicionPlants[1];

        EstadoPlanta newState = new EstadoPlanta(newmatriz, this.getRowPosition(),
        										 this.getColumnPosition(), this.cantidadSol, 
        										 this.contadorZombie, this.zombieTotal, 
        										 this.zombiePercibidos, this.celdasVisitadasX,
        										 this.celdasVisitadasY);
   
        return newState;
    }

    @Override
    public void updateState(Perception p) {
    	
        PercepcionPlanta plantsPerception = (PercepcionPlanta) p;

        int row = this.getRowPosition();
        int col = this.getColumnPosition();
        
        // Muestra la información que se encuentra en la fila y columna.
    	int i = col;

		for (Integer valor : plantsPerception.getSensorFilaDerecha()) 
		{ 
			matriz[row][i] = valor.intValue();
		
			if( matriz[row][i] >= 1 && matriz[row][i] <= 5)
			{
				zombiePercibidos++;
			}
			i++;
		}

		int j = col;
			
		for (Integer valor : plantsPerception.getSensorFilaIzquierda()) 
		{ 
			matriz[row][j] = valor.intValue();
			
			if( matriz[row][j] >= 1 && matriz[row][j] <= 5)
			{
				zombiePercibidos++;
			}
			j--;
		}
		
<<<<<<< HEAD
		i = row;
=======
		int k = row;
>>>>>>> jesica-develop

		for (Integer valor : plantsPerception.getSensorColumnaArriba()) 
		{ 
			matriz[k][col] = valor.intValue();
			
			if(matriz[k][col] >= 1 && matriz[k][col] <= 5)
			{
				zombiePercibidos++;
			}
			k++;
		}

		int m = row;
		
		for (Integer valor : plantsPerception.getSensorColumnaAbajo()) 
		{ 
			matriz[m][col] = valor.intValue();
			
			if(matriz[m][col] >= 1 && matriz[m][col] <= 5)
			{
				zombiePercibidos++;
			}
			m--;
		}
		
        int cantSoles = this.getCantidadSol();
        int contadorZombie = plantsPerception.getContZombie();
        int celdasx = plantsPerception.getCeldasVisitadasX();
        int celdasy = plantsPerception.getCeldasVisitadasY();
        int zombieTotal = plantsPerception.getZombieTotal();
      //  int zombiePercibido = plantsPerception.getZombiePercibido();
        this.celdasVisitadasX = celdasx;
        this.celdasVisitadasX = celdasy;
        this.contadorZombie = contadorZombie;
        this.cantidadSol = cantSoles;
        this.zombieTotal = zombieTotal;
       // this.zombiePercibidos = zombiePercibido;
    }

    @Override
    public void initState() {
    
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                matriz[row][col] = PercepcionPlanta.PERCEPCION_VACIO;
            }
        }
        
        this.setRowPosition(0);
        this.setColumnPosition(0);
        this.setCantidadSol(10);
        this.setContadorZombie(0);
    }
    
  public void initStateNuevamente(int row, int col) {
    	
    	Random random = new Random();
    	
        for (row = 0; row < matriz.length; row++) {
            for (col = 0; col < matriz[0].length; col++) {
                matriz[row][col] = PercepcionPlanta.PERCEPCION_VACIO;
            }
        }
    }

    /**
     * This method returns the String representation of the agent state.
     */
    @Override
    public String toString() {
    	  
    	String str = "";

    	str += "\n\n Posicion: [" + this.getRowPosition() + "," + "" + this.getColumnPosition() + "]\n";
        str += " Cantidad de Soles: " + this.getCantidadSol() + "\n";
        str += " Zombie muertos: " + this.contadorZombie + "\n";
        str += " Total zombie: " + this.getZombieTotal() + "\n";
        str += " Zombie Percibidos: " + this.getZombiePercibidos() + "\n";
        str += " Cantidad celdas visitadas en X: " + this.getCeldasVisitadasX() + "\n";
        str += " Cantidad celdas visitadas en Y: " + this.getCeldasVisitadasY() + "\n";

        str = str + "\n";
        for (int row = 0; row < matriz.length; row++) {
            str += "| ";
            for (int col = 0; col < matriz[0].length; col++) {
            	
<<<<<<< HEAD
            	 if (matriz[row][col] == PercepcionPlanta.PERCEPCION_DESCONOCIDO) {
                     str += "x ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_VACIO) { 
                 	str +=  "_ ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1) {
                 	str += "z1 ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2) {
                 	str += "z2 ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3) {
                 	str += "z3 ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4) {
                 	str += "z4 ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5) {
                 	str += "z5 ";
             	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_1SOL){
             		str += "* ";
             	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_2SOL){
             		str += "** ";
             	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_3SOL){
             		str += "*** ";
             	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL){
             		str += "o ";
             	} else {
             		str += matriz[row][col] + " ";
                 }
=======
                if (matriz[row][col] == PercepcionPlanta.PERCEPCION_DESCONOCIDO) {
                    str += "x ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_VACIO) { 
                	str +=  "_ ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1) {
                	str += "z1 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2) {
                	str += "z2 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3) {
                	str += "z3 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4) {
                	str += "z4 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5) {
                	str += "z5 ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1){
            		str += "* ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL2){
            		str += "** ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3){
            		str += "*** ";
            	} else {
            		str += matriz[row][col] + " ";
                }
>>>>>>> jesica-develop
            }
            str = str + " |\n";
        }
        str = str + " ";

        return str;
    }

    /**
     * This method is used in the search process to verify if the node already
     * exists in the actual search.
     */
    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof EstadoPlanta))
            return false;

        int[][] matrizObj = ((EstadoPlanta) obj).getMatriz();
        int[] positionObj = ((EstadoPlanta) obj).getPosition();
        int sol = ((EstadoPlanta) obj).getCantidadSol();

        if (!(sol == this.getCantidadSol())) {
        	return false;
        }
        
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                if (matriz[row][col] != matrizObj[row][col]) {
                    return false;
                }
            }
        }

        if (posicionPlants[0] != positionObj[0] || posicionPlants[1] != positionObj[1]) {
            return false;
        }
        
        return true;
    }

    public int numeroRandomGirasol()
    {
    	return numeroRandom(1,3);
    }
    
    public int getmatrizPosition(int row, int col) {
        return matriz[row][col];
    }

    public void setmatrizPosition(int row, int col, int value) {
        this.matriz[row][col] = value;
    }

    public int[] getPosition() {
        return posicionPlants;
    }

    public void setRowPosition(int value) {
        this.posicionPlants[0] = value;
    }

    public void setColumnPosition(int value) {
        this.posicionPlants[1] = value;
    }

    public int getRowPosition() {
        return posicionPlants[0];
    }

    public int getColumnPosition() {
        return posicionPlants[1];
    }
    
    public int[][] getMatriz() {
		return matriz;
	}

	public void setMatriz(int[][] matriz) {
		this.matriz = matriz;
	}

	public int[] getPosicionPlants() {
		return posicionPlants;
	}

	public void setPosicionPlants(int[] posicionPlants) {
		this.posicionPlants = posicionPlants;
	}

	public int[] getPosicionInicial() {
		return posicionInicial;
	}

	public void setPosicionInicial(int[] posicionInicial) {
		this.posicionInicial = posicionInicial;
	}

	public int getCantidadSol() {
		return cantidadSol;
	}

	public void setCantidadSol(int cantidadSol) {
		this.cantidadSol = cantidadSol;
	}


   public boolean isNoMoreZombie() {
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                if ( matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5 ) {
                	
                    return false;
                }
            }
        }
        return true;
    }
   
   public boolean hayZombie(int row, int col) {
      
	   if ( matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5 ) {
                  
		   return true;
       }
       return false;
   }
    
    public boolean tengoSol()
    {
    	return (this.cantidadSol>0);
    }
    
    public int getVisitedCellsCount() {
        return celdasVisitadasX;
    }

	public boolean isAllmatrizKnown() {

	        for (int col = 0; col < matriz[0].length; col++) {
	            if (matriz[0][col] == PercepcionPlanta.PERCEPCION_VACIO) {
	            	
	                return false;
	            }	    
	        }
  
	    return true;
	}
	
	
<<<<<<< HEAD
	public int incrementarSol(int row, int col)
	{
		int cantSol = 0;
		
		if (matriz[row][col] == PercepcionPlanta.PERCEPCION_1SOL)
		{
			cantSol = 1;
		}
		else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_2SOL)
		{
			cantSol = 2;
		}
		else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_3SOL)
		{
			cantSol = 3;
		}
		return cantSol;
=======
	public int incrementarSol(int row,int col)
	{
		int sol = 0;
		
		if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1)
		{
			sol = 1;
		}
		else if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1)
		{
			sol = 2;
		}
		else if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3)
		{
			sol = 3;
		}
		return sol;
>>>>>>> jesica-develop
	}
	
	public boolean haySol(int row, int col)
	{
<<<<<<< HEAD
		return (matriz[row][col] == PercepcionPlanta.PERCEPCION_1SOL ||
				matriz[row][col] == PercepcionPlanta.PERCEPCION_2SOL ||
				matriz[row][col] == PercepcionPlanta.PERCEPCION_3SOL);
=======
		return (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1
				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL2
				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3);
>>>>>>> jesica-develop
	}

	public int getContadorZombie() {
		return contadorZombie;
	}

	public void setContadorZombie(int contadorZombie) {
		this.contadorZombie = contadorZombie;
	}

	public int getZombieTotal() {
		return zombieTotal;
	}

	public void setZombieTotal(int zombieTotal) {
		this.zombieTotal = zombieTotal;
	}

	public int getZombiePercibidos() {
		return zombiePercibidos;
	}

	public void setZombiePercibidos(int zombiePercibidos) {
		this.zombiePercibidos = zombiePercibidos;
	}

	public int getCeldasVisitadasX() {
		return celdasVisitadasX;
	}

	public void setCeldasVisitadasX(int celdasVisitadasX) {
		this.celdasVisitadasX = celdasVisitadasX;
	}

	public int getCeldasVisitadasY() {
		return celdasVisitadasY;
	}

	public void setCeldasVisitadasY(int celdasVisitadasY) {
		this.celdasVisitadasY = celdasVisitadasY;
	}
	
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-09 13:30:14.476
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-09 13:30:14.477
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:30:20.694
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search;

import java.util.Random;
import frsf.cidisi.faia.agent.Perception;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;

public class EstadoPlanta extends SearchBasedAgentState {

    private int[][] matriz;
    private int[] posicionPlants;
    private int[] posicionInicial;
    private int cantidadSol;
    private int celdasVisitadasX;
    private int celdasVisitadasY;
    private int contadorZombie;
    private int zombieTotal;
    private int zombiePercibidos;

    public EstadoPlanta(int[][] m, int row, int col, int s, int cont, int z, int zp, int x, int y) {
        matriz = m;
        posicionPlants = new int[] {row,col};
        posicionInicial = new int[2];
        posicionInicial[0] = row;
        posicionInicial[1] = col;
        cantidadSol = s;
        contadorZombie = cont;
        celdasVisitadasX = x;
        celdasVisitadasY = y;
        zombieTotal = z;
        zombiePercibidos = zp;
    }

    public EstadoPlanta() {
    	
        matriz = new int[5][9];
        posicionPlants = new int[2];
        cantidadSol = 6;
        contadorZombie = 0;
        celdasVisitadasX = 0;
        celdasVisitadasY = 0;
        zombiePercibidos = 0;
          
        this.initState();
    }
    
    public static int numeroRandom(int min, int max) {
        
        Random random = new Random();

        int randomNum = random.nextInt((max - min) + 1) + min;

        return randomNum;
    }

    @Override
    public SearchBasedAgentState clone() {
    	
        int[][] newmatriz = new int[5][9];

        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                newmatriz[row][col] = matriz[row][col];
            }
        }

        int[] newPosition = new int[2];
        newPosition[0] = posicionPlants[0];
        newPosition[1] = posicionPlants[1];

        EstadoPlanta newState = new EstadoPlanta(newmatriz, this.getRowPosition(),
        										 this.getColumnPosition(), this.cantidadSol, 
        										 this.contadorZombie, this.zombieTotal, 
        										 this.zombiePercibidos, this.celdasVisitadasX,
        										 this.celdasVisitadasY);
   
        return newState;
    }

    @Override
    public void updateState(Perception p) {
    	
        PercepcionPlanta plantsPerception = (PercepcionPlanta) p;

        int row = this.getRowPosition();
        int col = this.getColumnPosition();
        
        // Muestra la información que se encuentra en la fila y columna.
    	int i = col;

		for (Integer valor : plantsPerception.getSensorFilaDerecha()) 
		{ 
			matriz[row][i] = valor.intValue();
		
			if( matriz[row][i] >= 1 && matriz[row][i] <= 5)
			{
				zombiePercibidos++;
			}
			i++;
		}

		int j = col;
			
		for (Integer valor : plantsPerception.getSensorFilaIzquierda()) 
		{ 
			matriz[row][j] = valor.intValue();
			
			if( matriz[row][j] >= 1 && matriz[row][j] <= 5)
			{
				zombiePercibidos++;
			}
			j--;
		}

		int k = row;
>>>>>>> jesica-develop

		for (Integer valor : plantsPerception.getSensorColumnaArriba()) 
		{ 
			matriz[k][col] = valor.intValue();
			
			if(matriz[k][col] >= 1 && matriz[k][col] <= 5)
			{
				zombiePercibidos++;
			}
			k++;
		}

		int m = row;
		
		for (Integer valor : plantsPerception.getSensorColumnaAbajo()) 
		{ 
			matriz[m][col] = valor.intValue();
			
			if(matriz[m][col] >= 1 && matriz[m][col] <= 5)
			{
				zombiePercibidos++;
			}
			m--;
		}
		
        int cantSoles = this.getCantidadSol();
        int contadorZombie = plantsPerception.getContZombie();
        int celdasx = plantsPerception.getCeldasVisitadasX();
        int celdasy = plantsPerception.getCeldasVisitadasY();
        int zombieTotal = plantsPerception.getZombieTotal();
      //  int zombiePercibido = plantsPerception.getZombiePercibido();
        this.celdasVisitadasX = celdasx;
        this.celdasVisitadasX = celdasy;
        this.contadorZombie = contadorZombie;
        this.cantidadSol = cantSoles;
        this.zombieTotal = zombieTotal;
       // this.zombiePercibidos = zombiePercibido;
    }

    @Override
    public void initState() {
    
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                matriz[row][col] = PercepcionPlanta.PERCEPCION_VACIO;
            }
        }
        
        this.setRowPosition(0);
        this.setColumnPosition(0);
        this.setCantidadSol(10);
        this.setContadorZombie(0);
    }
    
  public void initStateNuevamente(int row, int col) {
    	
    	Random random = new Random();
    	
        for (row = 0; row < matriz.length; row++) {
            for (col = 0; col < matriz[0].length; col++) {
                matriz[row][col] = PercepcionPlanta.PERCEPCION_VACIO;
            }
        }
    }

    /**
     * This method returns the String representation of the agent state.
     */
    @Override
    public String toString() {
    	  
    	String str = "";

    	str += "\n\n Posicion: [" + this.getRowPosition() + "," + "" + this.getColumnPosition() + "]\n";
        str += " Cantidad de Soles: " + this.getCantidadSol() + "\n";
        str += " Zombie muertos: " + this.contadorZombie + "\n";
        str += " Total zombie: " + this.getZombieTotal() + "\n";
        str += " Zombie Percibidos: " + this.getZombiePercibidos() + "\n";
        str += " Cantidad celdas visitadas en X: " + this.getCeldasVisitadasX() + "\n";
        str += " Cantidad celdas visitadas en Y: " + this.getCeldasVisitadasY() + "\n";

        str = str + "\n";
        for (int row = 0; row < matriz.length; row++) {
            str += "| ";
            for (int col = 0; col < matriz[0].length; col++) {
            	
<<<<<<< HEAD
            	 if (matriz[row][col] == PercepcionPlanta.PERCEPCION_DESCONOCIDO) {
                     str += "x ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_VACIO) { 
                 	str +=  "_ ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1) {
                 	str += "z1 ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2) {
                 	str += "z2 ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3) {
                 	str += "z3 ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4) {
                 	str += "z4 ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5) {
                 	str += "z5 ";
             	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_1SOL){
             		str += "* ";
             	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_2SOL){
             		str += "** ";
             	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_3SOL){
             		str += "*** ";
             	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL){
             		str += "o ";
             	} else {
             		str += matriz[row][col] + " ";
                 }
=======
                if (matriz[row][col] == PercepcionPlanta.PERCEPCION_DESCONOCIDO) {
                    str += "x ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_VACIO) { 
                	str +=  "_ ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1) {
                	str += "z1 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2) {
                	str += "z2 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3) {
                	str += "z3 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4) {
                	str += "z4 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5) {
                	str += "z5 ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1){
            		str += "* ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL2){
            		str += "** ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3){
            		str += "*** ";
            	} else {
            		str += matriz[row][col] + " ";
                }
>>>>>>> jesica-develop
            }
            str = str + " |\n";
        }
        str = str + " ";

        return str;
    }

    /**
     * This method is used in the search process to verify if the node already
     * exists in the actual search.
     */
    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof EstadoPlanta))
            return false;

        int[][] matrizObj = ((EstadoPlanta) obj).getMatriz();
        int[] positionObj = ((EstadoPlanta) obj).getPosition();
        int sol = ((EstadoPlanta) obj).getCantidadSol();

        if (!(sol == this.getCantidadSol())) {
        	return false;
        }
        
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                if (matriz[row][col] != matrizObj[row][col]) {
                    return false;
                }
            }
        }

        if (posicionPlants[0] != positionObj[0] || posicionPlants[1] != positionObj[1]) {
            return false;
        }
        
        return true;
    }

    public int numeroRandomGirasol()
    {
    	return numeroRandom(1,3);
    }
    
    public int getmatrizPosition(int row, int col) {
        return matriz[row][col];
    }

    public void setmatrizPosition(int row, int col, int value) {
        this.matriz[row][col] = value;
    }

    public int[] getPosition() {
        return posicionPlants;
    }

    public void setRowPosition(int value) {
        this.posicionPlants[0] = value;
    }

    public void setColumnPosition(int value) {
        this.posicionPlants[1] = value;
    }

    public int getRowPosition() {
        return posicionPlants[0];
    }

    public int getColumnPosition() {
        return posicionPlants[1];
    }
    
    public int[][] getMatriz() {
		return matriz;
	}

	public void setMatriz(int[][] matriz) {
		this.matriz = matriz;
	}

	public int[] getPosicionPlants() {
		return posicionPlants;
	}

	public void setPosicionPlants(int[] posicionPlants) {
		this.posicionPlants = posicionPlants;
	}

	public int[] getPosicionInicial() {
		return posicionInicial;
	}

	public void setPosicionInicial(int[] posicionInicial) {
		this.posicionInicial = posicionInicial;
	}

	public int getCantidadSol() {
		return cantidadSol;
	}

	public void setCantidadSol(int cantidadSol) {
		this.cantidadSol = cantidadSol;
	}


   public boolean isNoMoreZombie() {
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                if ( matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5 ) {
                	
                    return false;
                }
            }
        }
        return true;
    }
   
   public boolean hayZombie(int row, int col) {
      
	   if ( matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5 ) {
                  
		   return true;
       }
       return false;
   }
    
    public boolean tengoSol()
    {
    	return (this.cantidadSol>0);
    }
    
    public int getVisitedCellsCount() {
        return celdasVisitadasX;
    }

	public boolean isAllmatrizKnown() {

	        for (int col = 0; col < matriz[0].length; col++) {
	            if (matriz[0][col] == PercepcionPlanta.PERCEPCION_VACIO) {
	            	
	                return false;
	            }	    
	        }
  
	    return true;
	}
	
	
<<<<<<< HEAD
	public int incrementarSol(int row, int col)
	{
		int cantSol = 0;
		
		if (matriz[row][col] == PercepcionPlanta.PERCEPCION_1SOL)
		{
			cantSol = 1;
		}
		else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_2SOL)
		{
			cantSol = 2;
		}
		else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_3SOL)
		{
			cantSol = 3;
		}
		return cantSol;
=======
	public int incrementarSol(int row,int col)
	{
		int sol = 0;
		
		if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1)
		{
			sol = 1;
		}
		else if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1)
		{
			sol = 2;
		}
		else if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3)
		{
			sol = 3;
		}
		return sol;
>>>>>>> jesica-develop
	}
	
	public boolean haySol(int row, int col)
	{
<<<<<<< HEAD
		return (matriz[row][col] == PercepcionPlanta.PERCEPCION_1SOL ||
				matriz[row][col] == PercepcionPlanta.PERCEPCION_2SOL ||
				matriz[row][col] == PercepcionPlanta.PERCEPCION_3SOL);
=======
		return (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1
				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL2
				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3);
>>>>>>> jesica-develop
	}

	public int getContadorZombie() {
		return contadorZombie;
	}

	public void setContadorZombie(int contadorZombie) {
		this.contadorZombie = contadorZombie;
	}

	public int getZombieTotal() {
		return zombieTotal;
	}

	public void setZombieTotal(int zombieTotal) {
		this.zombieTotal = zombieTotal;
	}

	public int getZombiePercibidos() {
		return zombiePercibidos;
	}

	public void setZombiePercibidos(int zombiePercibidos) {
		this.zombiePercibidos = zombiePercibidos;
	}

	public int getCeldasVisitadasX() {
		return celdasVisitadasX;
	}

	public void setCeldasVisitadasX(int celdasVisitadasX) {
		this.celdasVisitadasX = celdasVisitadasX;
	}

	public int getCeldasVisitadasY() {
		return celdasVisitadasY;
	}

	public void setCeldasVisitadasY(int celdasVisitadasY) {
		this.celdasVisitadasY = celdasVisitadasY;
	}
	
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-09 13:30:20.695
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-09 13:30:20.696
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:30:25.681
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search;

import java.util.Random;
import frsf.cidisi.faia.agent.Perception;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;

public class EstadoPlanta extends SearchBasedAgentState {

    private int[][] matriz;
    private int[] posicionPlants;
    private int[] posicionInicial;
    private int cantidadSol;
    private int celdasVisitadasX;
    private int celdasVisitadasY;
    private int contadorZombie;
    private int zombieTotal;
    private int zombiePercibidos;

    public EstadoPlanta(int[][] m, int row, int col, int s, int cont, int z, int zp, int x, int y) {
        matriz = m;
        posicionPlants = new int[] {row,col};
        posicionInicial = new int[2];
        posicionInicial[0] = row;
        posicionInicial[1] = col;
        cantidadSol = s;
        contadorZombie = cont;
        celdasVisitadasX = x;
        celdasVisitadasY = y;
        zombieTotal = z;
        zombiePercibidos = zp;
    }

    public EstadoPlanta() {
    	
        matriz = new int[5][9];
        posicionPlants = new int[2];
        cantidadSol = 6;
        contadorZombie = 0;
        celdasVisitadasX = 0;
        celdasVisitadasY = 0;
        zombiePercibidos = 0;
          
        this.initState();
    }
    
    public static int numeroRandom(int min, int max) {
        
        Random random = new Random();

        int randomNum = random.nextInt((max - min) + 1) + min;

        return randomNum;
    }

    @Override
    public SearchBasedAgentState clone() {
    	
        int[][] newmatriz = new int[5][9];

        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                newmatriz[row][col] = matriz[row][col];
            }
        }

        int[] newPosition = new int[2];
        newPosition[0] = posicionPlants[0];
        newPosition[1] = posicionPlants[1];

        EstadoPlanta newState = new EstadoPlanta(newmatriz, this.getRowPosition(),
        										 this.getColumnPosition(), this.cantidadSol, 
        										 this.contadorZombie, this.zombieTotal, 
        										 this.zombiePercibidos, this.celdasVisitadasX,
        										 this.celdasVisitadasY);
   
        return newState;
    }

    @Override
    public void updateState(Perception p) {
    	
        PercepcionPlanta plantsPerception = (PercepcionPlanta) p;

        int row = this.getRowPosition();
        int col = this.getColumnPosition();
        
        // Muestra la información que se encuentra en la fila y columna.
    	int i = col;

		for (Integer valor : plantsPerception.getSensorFilaDerecha()) 
		{ 
			matriz[row][i] = valor.intValue();
		
			if( matriz[row][i] >= 1 && matriz[row][i] <= 5)
			{
				zombiePercibidos++;
			}
			i++;
		}

		int j = col;
			
		for (Integer valor : plantsPerception.getSensorFilaIzquierda()) 
		{ 
			matriz[row][j] = valor.intValue();
			
			if( matriz[row][j] >= 1 && matriz[row][j] <= 5)
			{
				zombiePercibidos++;
			}
			j--;
		}

		int k = row;

		for (Integer valor : plantsPerception.getSensorColumnaArriba()) 
		{ 
			matriz[k][col] = valor.intValue();
			
			if(matriz[k][col] >= 1 && matriz[k][col] <= 5)
			{
				zombiePercibidos++;
			}
			k++;
		}

		int m = row;
		
		for (Integer valor : plantsPerception.getSensorColumnaAbajo()) 
		{ 
			matriz[m][col] = valor.intValue();
			
			if(matriz[m][col] >= 1 && matriz[m][col] <= 5)
			{
				zombiePercibidos++;
			}
			m--;
		}
		
        int cantSoles = this.getCantidadSol();
        int contadorZombie = plantsPerception.getContZombie();
        int celdasx = plantsPerception.getCeldasVisitadasX();
        int celdasy = plantsPerception.getCeldasVisitadasY();
        int zombieTotal = plantsPerception.getZombieTotal();
      //  int zombiePercibido = plantsPerception.getZombiePercibido();
        this.celdasVisitadasX = celdasx;
        this.celdasVisitadasX = celdasy;
        this.contadorZombie = contadorZombie;
        this.cantidadSol = cantSoles;
        this.zombieTotal = zombieTotal;
       // this.zombiePercibidos = zombiePercibido;
    }

    @Override
    public void initState() {
    
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                matriz[row][col] = PercepcionPlanta.PERCEPCION_VACIO;
            }
        }
        
        this.setRowPosition(0);
        this.setColumnPosition(0);
        this.setCantidadSol(10);
        this.setContadorZombie(0);
    }
    
  public void initStateNuevamente(int row, int col) {
    	
    	Random random = new Random();
    	
        for (row = 0; row < matriz.length; row++) {
            for (col = 0; col < matriz[0].length; col++) {
                matriz[row][col] = PercepcionPlanta.PERCEPCION_VACIO;
            }
        }
    }

    /**
     * This method returns the String representation of the agent state.
     */
    @Override
    public String toString() {
    	  
    	String str = "";

    	str += "\n\n Posicion: [" + this.getRowPosition() + "," + "" + this.getColumnPosition() + "]\n";
        str += " Cantidad de Soles: " + this.getCantidadSol() + "\n";
        str += " Zombie muertos: " + this.contadorZombie + "\n";
        str += " Total zombie: " + this.getZombieTotal() + "\n";
        str += " Zombie Percibidos: " + this.getZombiePercibidos() + "\n";
        str += " Cantidad celdas visitadas en X: " + this.getCeldasVisitadasX() + "\n";
        str += " Cantidad celdas visitadas en Y: " + this.getCeldasVisitadasY() + "\n";

        str = str + "\n";
        for (int row = 0; row < matriz.length; row++) {
            str += "| ";
            for (int col = 0; col < matriz[0].length; col++) {
            	
<<<<<<< HEAD
            	 if (matriz[row][col] == PercepcionPlanta.PERCEPCION_DESCONOCIDO) {
                     str += "x ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_VACIO) { 
                 	str +=  "_ ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1) {
                 	str += "z1 ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2) {
                 	str += "z2 ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3) {
                 	str += "z3 ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4) {
                 	str += "z4 ";
                 } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5) {
                 	str += "z5 ";
             	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_1SOL){
             		str += "* ";
             	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_2SOL){
             		str += "** ";
             	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_3SOL){
             		str += "*** ";
             	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL){
             		str += "o ";
             	} else {
             		str += matriz[row][col] + " ";
                 }
=======
                if (matriz[row][col] == PercepcionPlanta.PERCEPCION_DESCONOCIDO) {
                    str += "x ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_VACIO) { 
                	str +=  "_ ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1) {
                	str += "z1 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2) {
                	str += "z2 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3) {
                	str += "z3 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4) {
                	str += "z4 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5) {
                	str += "z5 ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1){
            		str += "* ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL2){
            		str += "** ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3){
            		str += "*** ";
            	} else {
            		str += matriz[row][col] + " ";
                }
>>>>>>> jesica-develop
            }
            str = str + " |\n";
        }
        str = str + " ";

        return str;
    }

    /**
     * This method is used in the search process to verify if the node already
     * exists in the actual search.
     */
    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof EstadoPlanta))
            return false;

        int[][] matrizObj = ((EstadoPlanta) obj).getMatriz();
        int[] positionObj = ((EstadoPlanta) obj).getPosition();
        int sol = ((EstadoPlanta) obj).getCantidadSol();

        if (!(sol == this.getCantidadSol())) {
        	return false;
        }
        
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                if (matriz[row][col] != matrizObj[row][col]) {
                    return false;
                }
            }
        }

        if (posicionPlants[0] != positionObj[0] || posicionPlants[1] != positionObj[1]) {
            return false;
        }
        
        return true;
    }

    public int numeroRandomGirasol()
    {
    	return numeroRandom(1,3);
    }
    
    public int getmatrizPosition(int row, int col) {
        return matriz[row][col];
    }

    public void setmatrizPosition(int row, int col, int value) {
        this.matriz[row][col] = value;
    }

    public int[] getPosition() {
        return posicionPlants;
    }

    public void setRowPosition(int value) {
        this.posicionPlants[0] = value;
    }

    public void setColumnPosition(int value) {
        this.posicionPlants[1] = value;
    }

    public int getRowPosition() {
        return posicionPlants[0];
    }

    public int getColumnPosition() {
        return posicionPlants[1];
    }
    
    public int[][] getMatriz() {
		return matriz;
	}

	public void setMatriz(int[][] matriz) {
		this.matriz = matriz;
	}

	public int[] getPosicionPlants() {
		return posicionPlants;
	}

	public void setPosicionPlants(int[] posicionPlants) {
		this.posicionPlants = posicionPlants;
	}

	public int[] getPosicionInicial() {
		return posicionInicial;
	}

	public void setPosicionInicial(int[] posicionInicial) {
		this.posicionInicial = posicionInicial;
	}

	public int getCantidadSol() {
		return cantidadSol;
	}

	public void setCantidadSol(int cantidadSol) {
		this.cantidadSol = cantidadSol;
	}


   public boolean isNoMoreZombie() {
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                if ( matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5 ) {
                	
                    return false;
                }
            }
        }
        return true;
    }
   
   public boolean hayZombie(int row, int col) {
      
	   if ( matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5 ) {
                  
		   return true;
       }
       return false;
   }
    
    public boolean tengoSol()
    {
    	return (this.cantidadSol>0);
    }
    
    public int getVisitedCellsCount() {
        return celdasVisitadasX;
    }

	public boolean isAllmatrizKnown() {

	        for (int col = 0; col < matriz[0].length; col++) {
	            if (matriz[0][col] == PercepcionPlanta.PERCEPCION_VACIO) {
	            	
	                return false;
	            }	    
	        }
  
	    return true;
	}
	
	
<<<<<<< HEAD
	public int incrementarSol(int row, int col)
	{
		int cantSol = 0;
		
		if (matriz[row][col] == PercepcionPlanta.PERCEPCION_1SOL)
		{
			cantSol = 1;
		}
		else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_2SOL)
		{
			cantSol = 2;
		}
		else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_3SOL)
		{
			cantSol = 3;
		}
		return cantSol;
=======
	public int incrementarSol(int row,int col)
	{
		int sol = 0;
		
		if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1)
		{
			sol = 1;
		}
		else if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1)
		{
			sol = 2;
		}
		else if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3)
		{
			sol = 3;
		}
		return sol;
>>>>>>> jesica-develop
	}
	
	public boolean haySol(int row, int col)
	{
<<<<<<< HEAD
		return (matriz[row][col] == PercepcionPlanta.PERCEPCION_1SOL ||
				matriz[row][col] == PercepcionPlanta.PERCEPCION_2SOL ||
				matriz[row][col] == PercepcionPlanta.PERCEPCION_3SOL);
=======
		return (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1
				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL2
				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3);
>>>>>>> jesica-develop
	}

	public int getContadorZombie() {
		return contadorZombie;
	}

	public void setContadorZombie(int contadorZombie) {
		this.contadorZombie = contadorZombie;
	}

	public int getZombieTotal() {
		return zombieTotal;
	}

	public void setZombieTotal(int zombieTotal) {
		this.zombieTotal = zombieTotal;
	}

	public int getZombiePercibidos() {
		return zombiePercibidos;
	}

	public void setZombiePercibidos(int zombiePercibidos) {
		this.zombiePercibidos = zombiePercibidos;
	}

	public int getCeldasVisitadasX() {
		return celdasVisitadasX;
	}

	public void setCeldasVisitadasX(int celdasVisitadasX) {
		this.celdasVisitadasX = celdasVisitadasX;
	}

	public int getCeldasVisitadasY() {
		return celdasVisitadasY;
	}

	public void setCeldasVisitadasY(int celdasVisitadasY) {
		this.celdasVisitadasY = celdasVisitadasY;
	}
	
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-09 13:30:25.683
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-09 13:30:25.684
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:30:39.777
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search;

import java.util.Random;
import frsf.cidisi.faia.agent.Perception;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;

public class EstadoPlanta extends SearchBasedAgentState {

    private int[][] matriz;
    private int[] posicionPlants;
    private int[] posicionInicial;
    private int cantidadSol;
    private int celdasVisitadasX;
    private int celdasVisitadasY;
    private int contadorZombie;
    private int zombieTotal;
    private int zombiePercibidos;

    public EstadoPlanta(int[][] m, int row, int col, int s, int cont, int z, int zp, int x, int y) {
        matriz = m;
        posicionPlants = new int[] {row,col};
        posicionInicial = new int[2];
        posicionInicial[0] = row;
        posicionInicial[1] = col;
        cantidadSol = s;
        contadorZombie = cont;
        celdasVisitadasX = x;
        celdasVisitadasY = y;
        zombieTotal = z;
        zombiePercibidos = zp;
    }

    public EstadoPlanta() {
    	
        matriz = new int[5][9];
        posicionPlants = new int[2];
        cantidadSol = 6;
        contadorZombie = 0;
        celdasVisitadasX = 0;
        celdasVisitadasY = 0;
        zombiePercibidos = 0;
          
        this.initState();
    }
    
    public static int numeroRandom(int min, int max) {
        
        Random random = new Random();

        int randomNum = random.nextInt((max - min) + 1) + min;

        return randomNum;
    }

    @Override
    public SearchBasedAgentState clone() {
    	
        int[][] newmatriz = new int[5][9];

        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                newmatriz[row][col] = matriz[row][col];
            }
        }

        int[] newPosition = new int[2];
        newPosition[0] = posicionPlants[0];
        newPosition[1] = posicionPlants[1];

        EstadoPlanta newState = new EstadoPlanta(newmatriz, this.getRowPosition(),
        										 this.getColumnPosition(), this.cantidadSol, 
        										 this.contadorZombie, this.zombieTotal, 
        										 this.zombiePercibidos, this.celdasVisitadasX,
        										 this.celdasVisitadasY);
   
        return newState;
    }

    @Override
    public void updateState(Perception p) {
    	
        PercepcionPlanta plantsPerception = (PercepcionPlanta) p;

        int row = this.getRowPosition();
        int col = this.getColumnPosition();
        
        // Muestra la información que se encuentra en la fila y columna.
    	int i = col;

		for (Integer valor : plantsPerception.getSensorFilaDerecha()) 
		{ 
			matriz[row][i] = valor.intValue();
		
			if( matriz[row][i] >= 1 && matriz[row][i] <= 5)
			{
				zombiePercibidos++;
			}
			i++;
		}

		int j = col;
			
		for (Integer valor : plantsPerception.getSensorFilaIzquierda()) 
		{ 
			matriz[row][j] = valor.intValue();
			
			if( matriz[row][j] >= 1 && matriz[row][j] <= 5)
			{
				zombiePercibidos++;
			}
			j--;
		}

		int k = row;

		for (Integer valor : plantsPerception.getSensorColumnaArriba()) 
		{ 
			matriz[k][col] = valor.intValue();
			
			if(matriz[k][col] >= 1 && matriz[k][col] <= 5)
			{
				zombiePercibidos++;
			}
			k++;
		}

		int m = row;
		
		for (Integer valor : plantsPerception.getSensorColumnaAbajo()) 
		{ 
			matriz[m][col] = valor.intValue();
			
			if(matriz[m][col] >= 1 && matriz[m][col] <= 5)
			{
				zombiePercibidos++;
			}
			m--;
		}
		
        int cantSoles = this.getCantidadSol();
        int contadorZombie = plantsPerception.getContZombie();
        int celdasx = plantsPerception.getCeldasVisitadasX();
        int celdasy = plantsPerception.getCeldasVisitadasY();
        int zombieTotal = plantsPerception.getZombieTotal();
      //  int zombiePercibido = plantsPerception.getZombiePercibido();
        this.celdasVisitadasX = celdasx;
        this.celdasVisitadasX = celdasy;
        this.contadorZombie = contadorZombie;
        this.cantidadSol = cantSoles;
        this.zombieTotal = zombieTotal;
       // this.zombiePercibidos = zombiePercibido;
    }

    @Override
    public void initState() {
    
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                matriz[row][col] = PercepcionPlanta.PERCEPCION_VACIO;
            }
        }
        
        this.setRowPosition(0);
        this.setColumnPosition(0);
        this.setCantidadSol(10);
        this.setContadorZombie(0);
    }
    
  public void initStateNuevamente(int row, int col) {
    	
    	Random random = new Random();
    	
        for (row = 0; row < matriz.length; row++) {
            for (col = 0; col < matriz[0].length; col++) {
                matriz[row][col] = PercepcionPlanta.PERCEPCION_VACIO;
            }
        }
    }

    /**
     * This method returns the String representation of the agent state.
     */
    @Override
    public String toString() {
    	  
    	String str = "";

    	str += "\n\n Posicion: [" + this.getRowPosition() + "," + "" + this.getColumnPosition() + "]\n";
        str += " Cantidad de Soles: " + this.getCantidadSol() + "\n";
        str += " Zombie muertos: " + this.contadorZombie + "\n";
        str += " Total zombie: " + this.getZombieTotal() + "\n";
        str += " Zombie Percibidos: " + this.getZombiePercibidos() + "\n";
        str += " Cantidad celdas visitadas en X: " + this.getCeldasVisitadasX() + "\n";
        str += " Cantidad celdas visitadas en Y: " + this.getCeldasVisitadasY() + "\n";

        str = str + "\n";
        for (int row = 0; row < matriz.length; row++) {
            str += "| ";
            for (int col = 0; col < matriz[0].length; col++) {
            	

                if (matriz[row][col] == PercepcionPlanta.PERCEPCION_DESCONOCIDO) {
                    str += "x ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_VACIO) { 
                	str +=  "_ ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1) {
                	str += "z1 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2) {
                	str += "z2 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3) {
                	str += "z3 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4) {
                	str += "z4 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5) {
                	str += "z5 ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1){
            		str += "* ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL2){
            		str += "** ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3){
            		str += "*** ";
            	} else {
            		str += matriz[row][col] + " ";
                }
>>>>>>> jesica-develop
            }
            str = str + " |\n";
        }
        str = str + " ";

        return str;
    }

    /**
     * This method is used in the search process to verify if the node already
     * exists in the actual search.
     */
    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof EstadoPlanta))
            return false;

        int[][] matrizObj = ((EstadoPlanta) obj).getMatriz();
        int[] positionObj = ((EstadoPlanta) obj).getPosition();
        int sol = ((EstadoPlanta) obj).getCantidadSol();

        if (!(sol == this.getCantidadSol())) {
        	return false;
        }
        
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                if (matriz[row][col] != matrizObj[row][col]) {
                    return false;
                }
            }
        }

        if (posicionPlants[0] != positionObj[0] || posicionPlants[1] != positionObj[1]) {
            return false;
        }
        
        return true;
    }

    public int numeroRandomGirasol()
    {
    	return numeroRandom(1,3);
    }
    
    public int getmatrizPosition(int row, int col) {
        return matriz[row][col];
    }

    public void setmatrizPosition(int row, int col, int value) {
        this.matriz[row][col] = value;
    }

    public int[] getPosition() {
        return posicionPlants;
    }

    public void setRowPosition(int value) {
        this.posicionPlants[0] = value;
    }

    public void setColumnPosition(int value) {
        this.posicionPlants[1] = value;
    }

    public int getRowPosition() {
        return posicionPlants[0];
    }

    public int getColumnPosition() {
        return posicionPlants[1];
    }
    
    public int[][] getMatriz() {
		return matriz;
	}

	public void setMatriz(int[][] matriz) {
		this.matriz = matriz;
	}

	public int[] getPosicionPlants() {
		return posicionPlants;
	}

	public void setPosicionPlants(int[] posicionPlants) {
		this.posicionPlants = posicionPlants;
	}

	public int[] getPosicionInicial() {
		return posicionInicial;
	}

	public void setPosicionInicial(int[] posicionInicial) {
		this.posicionInicial = posicionInicial;
	}

	public int getCantidadSol() {
		return cantidadSol;
	}

	public void setCantidadSol(int cantidadSol) {
		this.cantidadSol = cantidadSol;
	}


   public boolean isNoMoreZombie() {
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                if ( matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5 ) {
                	
                    return false;
                }
            }
        }
        return true;
    }
   
   public boolean hayZombie(int row, int col) {
      
	   if ( matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5 ) {
                  
		   return true;
       }
       return false;
   }
    
    public boolean tengoSol()
    {
    	return (this.cantidadSol>0);
    }
    
    public int getVisitedCellsCount() {
        return celdasVisitadasX;
    }

	public boolean isAllmatrizKnown() {

	        for (int col = 0; col < matriz[0].length; col++) {
	            if (matriz[0][col] == PercepcionPlanta.PERCEPCION_VACIO) {
	            	
	                return false;
	            }	    
	        }
  
	    return true;
	}
	
	
<<<<<<< HEAD
	public int incrementarSol(int row, int col)
	{
		int cantSol = 0;
		
		if (matriz[row][col] == PercepcionPlanta.PERCEPCION_1SOL)
		{
			cantSol = 1;
		}
		else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_2SOL)
		{
			cantSol = 2;
		}
		else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_3SOL)
		{
			cantSol = 3;
		}
		return cantSol;
=======
	public int incrementarSol(int row,int col)
	{
		int sol = 0;
		
		if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1)
		{
			sol = 1;
		}
		else if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1)
		{
			sol = 2;
		}
		else if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3)
		{
			sol = 3;
		}
		return sol;
>>>>>>> jesica-develop
	}
	
	public boolean haySol(int row, int col)
	{
<<<<<<< HEAD
		return (matriz[row][col] == PercepcionPlanta.PERCEPCION_1SOL ||
				matriz[row][col] == PercepcionPlanta.PERCEPCION_2SOL ||
				matriz[row][col] == PercepcionPlanta.PERCEPCION_3SOL);
=======
		return (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1
				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL2
				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3);
>>>>>>> jesica-develop
	}

	public int getContadorZombie() {
		return contadorZombie;
	}

	public void setContadorZombie(int contadorZombie) {
		this.contadorZombie = contadorZombie;
	}

	public int getZombieTotal() {
		return zombieTotal;
	}

	public void setZombieTotal(int zombieTotal) {
		this.zombieTotal = zombieTotal;
	}

	public int getZombiePercibidos() {
		return zombiePercibidos;
	}

	public void setZombiePercibidos(int zombiePercibidos) {
		this.zombiePercibidos = zombiePercibidos;
	}

	public int getCeldasVisitadasX() {
		return celdasVisitadasX;
	}

	public void setCeldasVisitadasX(int celdasVisitadasX) {
		this.celdasVisitadasX = celdasVisitadasX;
	}

	public int getCeldasVisitadasY() {
		return celdasVisitadasY;
	}

	public void setCeldasVisitadasY(int celdasVisitadasY) {
		this.celdasVisitadasY = celdasVisitadasY;
	}
	
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-09 13:30:39.780
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-09 13:30:39.781
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:30:40.846
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search;

import java.util.Random;
import frsf.cidisi.faia.agent.Perception;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;

public class EstadoPlanta extends SearchBasedAgentState {

    private int[][] matriz;
    private int[] posicionPlants;
    private int[] posicionInicial;
    private int cantidadSol;
    private int celdasVisitadasX;
    private int celdasVisitadasY;
    private int contadorZombie;
    private int zombieTotal;
    private int zombiePercibidos;

    public EstadoPlanta(int[][] m, int row, int col, int s, int cont, int z, int zp, int x, int y) {
        matriz = m;
        posicionPlants = new int[] {row,col};
        posicionInicial = new int[2];
        posicionInicial[0] = row;
        posicionInicial[1] = col;
        cantidadSol = s;
        contadorZombie = cont;
        celdasVisitadasX = x;
        celdasVisitadasY = y;
        zombieTotal = z;
        zombiePercibidos = zp;
    }

    public EstadoPlanta() {
    	
        matriz = new int[5][9];
        posicionPlants = new int[2];
        cantidadSol = 6;
        contadorZombie = 0;
        celdasVisitadasX = 0;
        celdasVisitadasY = 0;
        zombiePercibidos = 0;
          
        this.initState();
    }
    
    public static int numeroRandom(int min, int max) {
        
        Random random = new Random();

        int randomNum = random.nextInt((max - min) + 1) + min;

        return randomNum;
    }

    @Override
    public SearchBasedAgentState clone() {
    	
        int[][] newmatriz = new int[5][9];

        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                newmatriz[row][col] = matriz[row][col];
            }
        }

        int[] newPosition = new int[2];
        newPosition[0] = posicionPlants[0];
        newPosition[1] = posicionPlants[1];

        EstadoPlanta newState = new EstadoPlanta(newmatriz, this.getRowPosition(),
        										 this.getColumnPosition(), this.cantidadSol, 
        										 this.contadorZombie, this.zombieTotal, 
        										 this.zombiePercibidos, this.celdasVisitadasX,
        										 this.celdasVisitadasY);
   
        return newState;
    }

    @Override
    public void updateState(Perception p) {
    	
        PercepcionPlanta plantsPerception = (PercepcionPlanta) p;

        int row = this.getRowPosition();
        int col = this.getColumnPosition();
        
        // Muestra la información que se encuentra en la fila y columna.
    	int i = col;

		for (Integer valor : plantsPerception.getSensorFilaDerecha()) 
		{ 
			matriz[row][i] = valor.intValue();
		
			if( matriz[row][i] >= 1 && matriz[row][i] <= 5)
			{
				zombiePercibidos++;
			}
			i++;
		}

		int j = col;
			
		for (Integer valor : plantsPerception.getSensorFilaIzquierda()) 
		{ 
			matriz[row][j] = valor.intValue();
			
			if( matriz[row][j] >= 1 && matriz[row][j] <= 5)
			{
				zombiePercibidos++;
			}
			j--;
		}

		int k = row;

		for (Integer valor : plantsPerception.getSensorColumnaArriba()) 
		{ 
			matriz[k][col] = valor.intValue();
			
			if(matriz[k][col] >= 1 && matriz[k][col] <= 5)
			{
				zombiePercibidos++;
			}
			k++;
		}

		int m = row;
		
		for (Integer valor : plantsPerception.getSensorColumnaAbajo()) 
		{ 
			matriz[m][col] = valor.intValue();
			
			if(matriz[m][col] >= 1 && matriz[m][col] <= 5)
			{
				zombiePercibidos++;
			}
			m--;
		}
		
        int cantSoles = this.getCantidadSol();
        int contadorZombie = plantsPerception.getContZombie();
        int celdasx = plantsPerception.getCeldasVisitadasX();
        int celdasy = plantsPerception.getCeldasVisitadasY();
        int zombieTotal = plantsPerception.getZombieTotal();
      //  int zombiePercibido = plantsPerception.getZombiePercibido();
        this.celdasVisitadasX = celdasx;
        this.celdasVisitadasX = celdasy;
        this.contadorZombie = contadorZombie;
        this.cantidadSol = cantSoles;
        this.zombieTotal = zombieTotal;
       // this.zombiePercibidos = zombiePercibido;
    }

    @Override
    public void initState() {
    
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                matriz[row][col] = PercepcionPlanta.PERCEPCION_VACIO;
            }
        }
        
        this.setRowPosition(0);
        this.setColumnPosition(0);
        this.setCantidadSol(10);
        this.setContadorZombie(0);
    }
    
  public void initStateNuevamente(int row, int col) {
    	
    	Random random = new Random();
    	
        for (row = 0; row < matriz.length; row++) {
            for (col = 0; col < matriz[0].length; col++) {
                matriz[row][col] = PercepcionPlanta.PERCEPCION_VACIO;
            }
        }
    }

    /**
     * This method returns the String representation of the agent state.
     */
    @Override
    public String toString() {
    	  
    	String str = "";

    	str += "\n\n Posicion: [" + this.getRowPosition() + "," + "" + this.getColumnPosition() + "]\n";
        str += " Cantidad de Soles: " + this.getCantidadSol() + "\n";
        str += " Zombie muertos: " + this.contadorZombie + "\n";
        str += " Total zombie: " + this.getZombieTotal() + "\n";
        str += " Zombie Percibidos: " + this.getZombiePercibidos() + "\n";
        str += " Cantidad celdas visitadas en X: " + this.getCeldasVisitadasX() + "\n";
        str += " Cantidad celdas visitadas en Y: " + this.getCeldasVisitadasY() + "\n";

        str = str + "\n";
        for (int row = 0; row < matriz.length; row++) {
            str += "| ";
            for (int col = 0; col < matriz[0].length; col++) {
            	
                if (matriz[row][col] == PercepcionPlanta.PERCEPCION_DESCONOCIDO) {
                    str += "x ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_VACIO) { 
                	str +=  "_ ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1) {
                	str += "z1 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2) {
                	str += "z2 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3) {
                	str += "z3 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4) {
                	str += "z4 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5) {
                	str += "z5 ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1){
            		str += "* ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL2){
            		str += "** ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3){
            		str += "*** ";
            	} else {
            		str += matriz[row][col] + " ";
                }
>>>>>>> jesica-develop
            }
            str = str + " |\n";
        }
        str = str + " ";

        return str;
    }

    /**
     * This method is used in the search process to verify if the node already
     * exists in the actual search.
     */
    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof EstadoPlanta))
            return false;

        int[][] matrizObj = ((EstadoPlanta) obj).getMatriz();
        int[] positionObj = ((EstadoPlanta) obj).getPosition();
        int sol = ((EstadoPlanta) obj).getCantidadSol();

        if (!(sol == this.getCantidadSol())) {
        	return false;
        }
        
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                if (matriz[row][col] != matrizObj[row][col]) {
                    return false;
                }
            }
        }

        if (posicionPlants[0] != positionObj[0] || posicionPlants[1] != positionObj[1]) {
            return false;
        }
        
        return true;
    }

    public int numeroRandomGirasol()
    {
    	return numeroRandom(1,3);
    }
    
    public int getmatrizPosition(int row, int col) {
        return matriz[row][col];
    }

    public void setmatrizPosition(int row, int col, int value) {
        this.matriz[row][col] = value;
    }

    public int[] getPosition() {
        return posicionPlants;
    }

    public void setRowPosition(int value) {
        this.posicionPlants[0] = value;
    }

    public void setColumnPosition(int value) {
        this.posicionPlants[1] = value;
    }

    public int getRowPosition() {
        return posicionPlants[0];
    }

    public int getColumnPosition() {
        return posicionPlants[1];
    }
    
    public int[][] getMatriz() {
		return matriz;
	}

	public void setMatriz(int[][] matriz) {
		this.matriz = matriz;
	}

	public int[] getPosicionPlants() {
		return posicionPlants;
	}

	public void setPosicionPlants(int[] posicionPlants) {
		this.posicionPlants = posicionPlants;
	}

	public int[] getPosicionInicial() {
		return posicionInicial;
	}

	public void setPosicionInicial(int[] posicionInicial) {
		this.posicionInicial = posicionInicial;
	}

	public int getCantidadSol() {
		return cantidadSol;
	}

	public void setCantidadSol(int cantidadSol) {
		this.cantidadSol = cantidadSol;
	}


   public boolean isNoMoreZombie() {
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                if ( matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5 ) {
                	
                    return false;
                }
            }
        }
        return true;
    }
   
   public boolean hayZombie(int row, int col) {
      
	   if ( matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5 ) {
                  
		   return true;
       }
       return false;
   }
    
    public boolean tengoSol()
    {
    	return (this.cantidadSol>0);
    }
    
    public int getVisitedCellsCount() {
        return celdasVisitadasX;
    }

	public boolean isAllmatrizKnown() {

	        for (int col = 0; col < matriz[0].length; col++) {
	            if (matriz[0][col] == PercepcionPlanta.PERCEPCION_VACIO) {
	            	
	                return false;
	            }	    
	        }
  
	    return true;
	}
	
	
<<<<<<< HEAD
	public int incrementarSol(int row, int col)
	{
		int cantSol = 0;
		
		if (matriz[row][col] == PercepcionPlanta.PERCEPCION_1SOL)
		{
			cantSol = 1;
		}
		else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_2SOL)
		{
			cantSol = 2;
		}
		else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_3SOL)
		{
			cantSol = 3;
		}
		return cantSol;
=======
	public int incrementarSol(int row,int col)
	{
		int sol = 0;
		
		if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1)
		{
			sol = 1;
		}
		else if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1)
		{
			sol = 2;
		}
		else if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3)
		{
			sol = 3;
		}
		return sol;
>>>>>>> jesica-develop
	}
	
	public boolean haySol(int row, int col)
	{
<<<<<<< HEAD
		return (matriz[row][col] == PercepcionPlanta.PERCEPCION_1SOL ||
				matriz[row][col] == PercepcionPlanta.PERCEPCION_2SOL ||
				matriz[row][col] == PercepcionPlanta.PERCEPCION_3SOL);
=======
		return (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1
				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL2
				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3);
>>>>>>> jesica-develop
	}

	public int getContadorZombie() {
		return contadorZombie;
	}

	public void setContadorZombie(int contadorZombie) {
		this.contadorZombie = contadorZombie;
	}

	public int getZombieTotal() {
		return zombieTotal;
	}

	public void setZombieTotal(int zombieTotal) {
		this.zombieTotal = zombieTotal;
	}

	public int getZombiePercibidos() {
		return zombiePercibidos;
	}

	public void setZombiePercibidos(int zombiePercibidos) {
		this.zombiePercibidos = zombiePercibidos;
	}

	public int getCeldasVisitadasX() {
		return celdasVisitadasX;
	}

	public void setCeldasVisitadasX(int celdasVisitadasX) {
		this.celdasVisitadasX = celdasVisitadasX;
	}

	public int getCeldasVisitadasY() {
		return celdasVisitadasY;
	}

	public void setCeldasVisitadasY(int celdasVisitadasY) {
		this.celdasVisitadasY = celdasVisitadasY;
	}
	
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-09 13:30:40.848
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-09 13:30:40.849
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:30:45.023
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search;

import java.util.Random;
import frsf.cidisi.faia.agent.Perception;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;

public class EstadoPlanta extends SearchBasedAgentState {

    private int[][] matriz;
    private int[] posicionPlants;
    private int[] posicionInicial;
    private int cantidadSol;
    private int celdasVisitadasX;
    private int celdasVisitadasY;
    private int contadorZombie;
    private int zombieTotal;
    private int zombiePercibidos;

    public EstadoPlanta(int[][] m, int row, int col, int s, int cont, int z, int zp, int x, int y) {
        matriz = m;
        posicionPlants = new int[] {row,col};
        posicionInicial = new int[2];
        posicionInicial[0] = row;
        posicionInicial[1] = col;
        cantidadSol = s;
        contadorZombie = cont;
        celdasVisitadasX = x;
        celdasVisitadasY = y;
        zombieTotal = z;
        zombiePercibidos = zp;
    }

    public EstadoPlanta() {
    	
        matriz = new int[5][9];
        posicionPlants = new int[2];
        cantidadSol = 6;
        contadorZombie = 0;
        celdasVisitadasX = 0;
        celdasVisitadasY = 0;
        zombiePercibidos = 0;
          
        this.initState();
    }
    
    public static int numeroRandom(int min, int max) {
        
        Random random = new Random();

        int randomNum = random.nextInt((max - min) + 1) + min;

        return randomNum;
    }

    @Override
    public SearchBasedAgentState clone() {
    	
        int[][] newmatriz = new int[5][9];

        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                newmatriz[row][col] = matriz[row][col];
            }
        }

        int[] newPosition = new int[2];
        newPosition[0] = posicionPlants[0];
        newPosition[1] = posicionPlants[1];

        EstadoPlanta newState = new EstadoPlanta(newmatriz, this.getRowPosition(),
        										 this.getColumnPosition(), this.cantidadSol, 
        										 this.contadorZombie, this.zombieTotal, 
        										 this.zombiePercibidos, this.celdasVisitadasX,
        										 this.celdasVisitadasY);
   
        return newState;
    }

    @Override
    public void updateState(Perception p) {
    	
        PercepcionPlanta plantsPerception = (PercepcionPlanta) p;

        int row = this.getRowPosition();
        int col = this.getColumnPosition();
        
        // Muestra la información que se encuentra en la fila y columna.
    	int i = col;

		for (Integer valor : plantsPerception.getSensorFilaDerecha()) 
		{ 
			matriz[row][i] = valor.intValue();
		
			if( matriz[row][i] >= 1 && matriz[row][i] <= 5)
			{
				zombiePercibidos++;
			}
			i++;
		}

		int j = col;
			
		for (Integer valor : plantsPerception.getSensorFilaIzquierda()) 
		{ 
			matriz[row][j] = valor.intValue();
			
			if( matriz[row][j] >= 1 && matriz[row][j] <= 5)
			{
				zombiePercibidos++;
			}
			j--;
		}

		int k = row;

		for (Integer valor : plantsPerception.getSensorColumnaArriba()) 
		{ 
			matriz[k][col] = valor.intValue();
			
			if(matriz[k][col] >= 1 && matriz[k][col] <= 5)
			{
				zombiePercibidos++;
			}
			k++;
		}

		int m = row;
		
		for (Integer valor : plantsPerception.getSensorColumnaAbajo()) 
		{ 
			matriz[m][col] = valor.intValue();
			
			if(matriz[m][col] >= 1 && matriz[m][col] <= 5)
			{
				zombiePercibidos++;
			}
			m--;
		}
		
        int cantSoles = this.getCantidadSol();
        int contadorZombie = plantsPerception.getContZombie();
        int celdasx = plantsPerception.getCeldasVisitadasX();
        int celdasy = plantsPerception.getCeldasVisitadasY();
        int zombieTotal = plantsPerception.getZombieTotal();
      //  int zombiePercibido = plantsPerception.getZombiePercibido();
        this.celdasVisitadasX = celdasx;
        this.celdasVisitadasX = celdasy;
        this.contadorZombie = contadorZombie;
        this.cantidadSol = cantSoles;
        this.zombieTotal = zombieTotal;
       // this.zombiePercibidos = zombiePercibido;
    }

    @Override
    public void initState() {
    
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                matriz[row][col] = PercepcionPlanta.PERCEPCION_VACIO;
            }
        }
        
        this.setRowPosition(0);
        this.setColumnPosition(0);
        this.setCantidadSol(10);
        this.setContadorZombie(0);
    }
    
  public void initStateNuevamente(int row, int col) {
    	
    	Random random = new Random();
    	
        for (row = 0; row < matriz.length; row++) {
            for (col = 0; col < matriz[0].length; col++) {
                matriz[row][col] = PercepcionPlanta.PERCEPCION_VACIO;
            }
        }
    }

    /**
     * This method returns the String representation of the agent state.
     */
    @Override
    public String toString() {
    	  
    	String str = "";

    	str += "\n\n Posicion: [" + this.getRowPosition() + "," + "" + this.getColumnPosition() + "]\n";
        str += " Cantidad de Soles: " + this.getCantidadSol() + "\n";
        str += " Zombie muertos: " + this.contadorZombie + "\n";
        str += " Total zombie: " + this.getZombieTotal() + "\n";
        str += " Zombie Percibidos: " + this.getZombiePercibidos() + "\n";
        str += " Cantidad celdas visitadas en X: " + this.getCeldasVisitadasX() + "\n";
        str += " Cantidad celdas visitadas en Y: " + this.getCeldasVisitadasY() + "\n";

        str = str + "\n";
        for (int row = 0; row < matriz.length; row++) {
            str += "| ";
            for (int col = 0; col < matriz[0].length; col++) {
            	
                if (matriz[row][col] == PercepcionPlanta.PERCEPCION_DESCONOCIDO) {
                    str += "x ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_VACIO) { 
                	str +=  "_ ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1) {
                	str += "z1 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2) {
                	str += "z2 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3) {
                	str += "z3 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4) {
                	str += "z4 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5) {
                	str += "z5 ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1){
            		str += "* ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL2){
            		str += "** ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3){
            		str += "*** ";
            	} else {
            		str += matriz[row][col] + " ";
                }
>>>>>>> jesica-develop
            }
            str = str + " |\n";
        }
        str = str + " ";

        return str;
    }

    /**
     * This method is used in the search process to verify if the node already
     * exists in the actual search.
     */
    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof EstadoPlanta))
            return false;

        int[][] matrizObj = ((EstadoPlanta) obj).getMatriz();
        int[] positionObj = ((EstadoPlanta) obj).getPosition();
        int sol = ((EstadoPlanta) obj).getCantidadSol();

        if (!(sol == this.getCantidadSol())) {
        	return false;
        }
        
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                if (matriz[row][col] != matrizObj[row][col]) {
                    return false;
                }
            }
        }

        if (posicionPlants[0] != positionObj[0] || posicionPlants[1] != positionObj[1]) {
            return false;
        }
        
        return true;
    }

    public int numeroRandomGirasol()
    {
    	return numeroRandom(1,3);
    }
    
    public int getmatrizPosition(int row, int col) {
        return matriz[row][col];
    }

    public void setmatrizPosition(int row, int col, int value) {
        this.matriz[row][col] = value;
    }

    public int[] getPosition() {
        return posicionPlants;
    }

    public void setRowPosition(int value) {
        this.posicionPlants[0] = value;
    }

    public void setColumnPosition(int value) {
        this.posicionPlants[1] = value;
    }

    public int getRowPosition() {
        return posicionPlants[0];
    }

    public int getColumnPosition() {
        return posicionPlants[1];
    }
    
    public int[][] getMatriz() {
		return matriz;
	}

	public void setMatriz(int[][] matriz) {
		this.matriz = matriz;
	}

	public int[] getPosicionPlants() {
		return posicionPlants;
	}

	public void setPosicionPlants(int[] posicionPlants) {
		this.posicionPlants = posicionPlants;
	}

	public int[] getPosicionInicial() {
		return posicionInicial;
	}

	public void setPosicionInicial(int[] posicionInicial) {
		this.posicionInicial = posicionInicial;
	}

	public int getCantidadSol() {
		return cantidadSol;
	}

	public void setCantidadSol(int cantidadSol) {
		this.cantidadSol = cantidadSol;
	}


   public boolean isNoMoreZombie() {
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                if ( matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5 ) {
                	
                    return false;
                }
            }
        }
        return true;
    }
   
   public boolean hayZombie(int row, int col) {
      
	   if ( matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5 ) {
                  
		   return true;
       }
       return false;
   }
    
    public boolean tengoSol()
    {
    	return (this.cantidadSol>0);
    }
    
    public int getVisitedCellsCount() {
        return celdasVisitadasX;
    }

	public boolean isAllmatrizKnown() {

	        for (int col = 0; col < matriz[0].length; col++) {
	            if (matriz[0][col] == PercepcionPlanta.PERCEPCION_VACIO) {
	            	
	                return false;
	            }	    
	        }
  
	    return true;
	}
	
	
<<<<<<< HEAD
	public int incrementarSol(int row, int col)
	{
		int cantSol = 0;
		
		if (matriz[row][col] == PercepcionPlanta.PERCEPCION_1SOL)
		{
			cantSol = 1;
		}
		else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_2SOL)
		{
			cantSol = 2;
		}
		else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_3SOL)
		{
			cantSol = 3;
		}
		return cantSol;
=======
	public int incrementarSol(int row,int col)
	{
		int sol = 0;
		
		if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1)
		{
			sol = 1;
		}
		else if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1)
		{
			sol = 2;
		}
		else if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3)
		{
			sol = 3;
		}
		return sol;
>>>>>>> jesica-develop
	}
	
	public boolean haySol(int row, int col)
	{
<<<<<<< HEAD
		return (matriz[row][col] == PercepcionPlanta.PERCEPCION_1SOL ||
				matriz[row][col] == PercepcionPlanta.PERCEPCION_2SOL ||
				matriz[row][col] == PercepcionPlanta.PERCEPCION_3SOL);
=======
		return (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1
				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL2
				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3);
>>>>>>> jesica-develop
	}

	public int getContadorZombie() {
		return contadorZombie;
	}

	public void setContadorZombie(int contadorZombie) {
		this.contadorZombie = contadorZombie;
	}

	public int getZombieTotal() {
		return zombieTotal;
	}

	public void setZombieTotal(int zombieTotal) {
		this.zombieTotal = zombieTotal;
	}

	public int getZombiePercibidos() {
		return zombiePercibidos;
	}

	public void setZombiePercibidos(int zombiePercibidos) {
		this.zombiePercibidos = zombiePercibidos;
	}

	public int getCeldasVisitadasX() {
		return celdasVisitadasX;
	}

	public void setCeldasVisitadasX(int celdasVisitadasX) {
		this.celdasVisitadasX = celdasVisitadasX;
	}

	public int getCeldasVisitadasY() {
		return celdasVisitadasY;
	}

	public void setCeldasVisitadasY(int celdasVisitadasY) {
		this.celdasVisitadasY = celdasVisitadasY;
	}
	
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4035)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3635)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-09 13:30:45.024
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4035)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3635)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-09 13:30:45.025
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4035)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3635)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:30:45.048
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search;

import java.util.Random;
import frsf.cidisi.faia.agent.Perception;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;

public class EstadoPlanta extends SearchBasedAgentState {

    private int[][] matriz;
    private int[] posicionPlants;
    private int[] posicionInicial;
    private int cantidadSol;
    private int celdasVisitadasX;
    private int celdasVisitadasY;
    private int contadorZombie;
    private int zombieTotal;
    private int zombiePercibidos;

    public EstadoPlanta(int[][] m, int row, int col, int s, int cont, int z, int zp, int x, int y) {
        matriz = m;
        posicionPlants = new int[] {row,col};
        posicionInicial = new int[2];
        posicionInicial[0] = row;
        posicionInicial[1] = col;
        cantidadSol = s;
        contadorZombie = cont;
        celdasVisitadasX = x;
        celdasVisitadasY = y;
        zombieTotal = z;
        zombiePercibidos = zp;
    }

    public EstadoPlanta() {
    	
        matriz = new int[5][9];
        posicionPlants = new int[2];
        cantidadSol = 6;
        contadorZombie = 0;
        celdasVisitadasX = 0;
        celdasVisitadasY = 0;
        zombiePercibidos = 0;
          
        this.initState();
    }
    
    public static int numeroRandom(int min, int max) {
        
        Random random = new Random();

        int randomNum = random.nextInt((max - min) + 1) + min;

        return randomNum;
    }

    @Override
    public SearchBasedAgentState clone() {
    	
        int[][] newmatriz = new int[5][9];

        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                newmatriz[row][col] = matriz[row][col];
            }
        }

        int[] newPosition = new int[2];
        newPosition[0] = posicionPlants[0];
        newPosition[1] = posicionPlants[1];

        EstadoPlanta newState = new EstadoPlanta(newmatriz, this.getRowPosition(),
        										 this.getColumnPosition(), this.cantidadSol, 
        										 this.contadorZombie, this.zombieTotal, 
        										 this.zombiePercibidos, this.celdasVisitadasX,
        										 this.celdasVisitadasY);
   
        return newState;
    }

    @Override
    public void updateState(Perception p) {
    	
        PercepcionPlanta plantsPerception = (PercepcionPlanta) p;

        int row = this.getRowPosition();
        int col = this.getColumnPosition();
        
        // Muestra la información que se encuentra en la fila y columna.
    	int i = col;

		for (Integer valor : plantsPerception.getSensorFilaDerecha()) 
		{ 
			matriz[row][i] = valor.intValue();
		
			if( matriz[row][i] >= 1 && matriz[row][i] <= 5)
			{
				zombiePercibidos++;
			}
			i++;
		}

		int j = col;
			
		for (Integer valor : plantsPerception.getSensorFilaIzquierda()) 
		{ 
			matriz[row][j] = valor.intValue();
			
			if( matriz[row][j] >= 1 && matriz[row][j] <= 5)
			{
				zombiePercibidos++;
			}
			j--;
		}

		int k = row;

		for (Integer valor : plantsPerception.getSensorColumnaArriba()) 
		{ 
			matriz[k][col] = valor.intValue();
			
			if(matriz[k][col] >= 1 && matriz[k][col] <= 5)
			{
				zombiePercibidos++;
			}
			k++;
		}

		int m = row;
		
		for (Integer valor : plantsPerception.getSensorColumnaAbajo()) 
		{ 
			matriz[m][col] = valor.intValue();
			
			if(matriz[m][col] >= 1 && matriz[m][col] <= 5)
			{
				zombiePercibidos++;
			}
			m--;
		}
		
        int cantSoles = this.getCantidadSol();
        int contadorZombie = plantsPerception.getContZombie();
        int celdasx = plantsPerception.getCeldasVisitadasX();
        int celdasy = plantsPerception.getCeldasVisitadasY();
        int zombieTotal = plantsPerception.getZombieTotal();
      //  int zombiePercibido = plantsPerception.getZombiePercibido();
        this.celdasVisitadasX = celdasx;
        this.celdasVisitadasX = celdasy;
        this.contadorZombie = contadorZombie;
        this.cantidadSol = cantSoles;
        this.zombieTotal = zombieTotal;
       // this.zombiePercibidos = zombiePercibido;
    }

    @Override
    public void initState() {
    
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                matriz[row][col] = PercepcionPlanta.PERCEPCION_VACIO;
            }
        }
        
        this.setRowPosition(0);
        this.setColumnPosition(0);
        this.setCantidadSol(10);
        this.setContadorZombie(0);
    }
    
  public void initStateNuevamente(int row, int col) {
    	
    	Random random = new Random();
    	
        for (row = 0; row < matriz.length; row++) {
            for (col = 0; col < matriz[0].length; col++) {
                matriz[row][col] = PercepcionPlanta.PERCEPCION_VACIO;
            }
        }
    }

    /**
     * This method returns the String representation of the agent state.
     */
    @Override
    public String toString() {
    	  
    	String str = "";

    	str += "\n\n Posicion: [" + this.getRowPosition() + "," + "" + this.getColumnPosition() + "]\n";
        str += " Cantidad de Soles: " + this.getCantidadSol() + "\n";
        str += " Zombie muertos: " + this.contadorZombie + "\n";
        str += " Total zombie: " + this.getZombieTotal() + "\n";
        str += " Zombie Percibidos: " + this.getZombiePercibidos() + "\n";
        str += " Cantidad celdas visitadas en X: " + this.getCeldasVisitadasX() + "\n";
        str += " Cantidad celdas visitadas en Y: " + this.getCeldasVisitadasY() + "\n";

        str = str + "\n";
        for (int row = 0; row < matriz.length; row++) {
            str += "| ";
            for (int col = 0; col < matriz[0].length; col++) {
            	
                if (matriz[row][col] == PercepcionPlanta.PERCEPCION_DESCONOCIDO) {
                    str += "x ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_VACIO) { 
                	str +=  "_ ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1) {
                	str += "z1 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2) {
                	str += "z2 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3) {
                	str += "z3 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4) {
                	str += "z4 ";
                } else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5) {
                	str += "z5 ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1){
            		str += "* ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL2){
            		str += "** ";
            	} else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3){
            		str += "*** ";
            	} else {
            		str += matriz[row][col] + " ";
                }
>>>>>>> jesica-develop
            }
            str = str + " |\n";
        }
        str = str + " ";

        return str;
    }

    /**
     * This method is used in the search process to verify if the node already
     * exists in the actual search.
     */
    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof EstadoPlanta))
            return false;

        int[][] matrizObj = ((EstadoPlanta) obj).getMatriz();
        int[] positionObj = ((EstadoPlanta) obj).getPosition();
        int sol = ((EstadoPlanta) obj).getCantidadSol();

        if (!(sol == this.getCantidadSol())) {
        	return false;
        }
        
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                if (matriz[row][col] != matrizObj[row][col]) {
                    return false;
                }
            }
        }

        if (posicionPlants[0] != positionObj[0] || posicionPlants[1] != positionObj[1]) {
            return false;
        }
        
        return true;
    }

    public int numeroRandomGirasol()
    {
    	return numeroRandom(1,3);
    }
    
    public int getmatrizPosition(int row, int col) {
        return matriz[row][col];
    }

    public void setmatrizPosition(int row, int col, int value) {
        this.matriz[row][col] = value;
    }

    public int[] getPosition() {
        return posicionPlants;
    }

    public void setRowPosition(int value) {
        this.posicionPlants[0] = value;
    }

    public void setColumnPosition(int value) {
        this.posicionPlants[1] = value;
    }

    public int getRowPosition() {
        return posicionPlants[0];
    }

    public int getColumnPosition() {
        return posicionPlants[1];
    }
    
    public int[][] getMatriz() {
		return matriz;
	}

	public void setMatriz(int[][] matriz) {
		this.matriz = matriz;
	}

	public int[] getPosicionPlants() {
		return posicionPlants;
	}

	public void setPosicionPlants(int[] posicionPlants) {
		this.posicionPlants = posicionPlants;
	}

	public int[] getPosicionInicial() {
		return posicionInicial;
	}

	public void setPosicionInicial(int[] posicionInicial) {
		this.posicionInicial = posicionInicial;
	}

	public int getCantidadSol() {
		return cantidadSol;
	}

	public void setCantidadSol(int cantidadSol) {
		this.cantidadSol = cantidadSol;
	}


   public boolean isNoMoreZombie() {
        for (int row = 0; row < matriz.length; row++) {
            for (int col = 0; col < matriz[0].length; col++) {
                if ( matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4
        				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5 ) {
                	
                    return false;
                }
            }
        }
        return true;
    }
   
   public boolean hayZombie(int row, int col) {
      
	   if ( matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO1
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO2
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO3
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO4
       			|| matriz[row][col] == PercepcionPlanta.PERCEPCION_ENEMIGO5 ) {
                  
		   return true;
       }
       return false;
   }
    
    public boolean tengoSol()
    {
    	return (this.cantidadSol>0);
    }
    
    public int getVisitedCellsCount() {
        return celdasVisitadasX;
    }

	public boolean isAllmatrizKnown() {

	        for (int col = 0; col < matriz[0].length; col++) {
	            if (matriz[0][col] == PercepcionPlanta.PERCEPCION_VACIO) {
	            	
	                return false;
	            }	    
	        }
  
	    return true;
	}
	
	
<<<<<<< HEAD
	public int incrementarSol(int row, int col)
	{
		int cantSol = 0;
		
		if (matriz[row][col] == PercepcionPlanta.PERCEPCION_1SOL)
		{
			cantSol = 1;
		}
		else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_2SOL)
		{
			cantSol = 2;
		}
		else if (matriz[row][col] == PercepcionPlanta.PERCEPCION_3SOL)
		{
			cantSol = 3;
		}
		return cantSol;
=======
	public int incrementarSol(int row,int col)
	{
		int sol = 0;
		
		if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1)
		{
			sol = 1;
		}
		else if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1)
		{
			sol = 2;
		}
		else if(matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3)
		{
			sol = 3;
		}
		return sol;
>>>>>>> jesica-develop
	}
	
	public boolean haySol(int row, int col)
	{
<<<<<<< HEAD
		return (matriz[row][col] == PercepcionPlanta.PERCEPCION_1SOL ||
				matriz[row][col] == PercepcionPlanta.PERCEPCION_2SOL ||
				matriz[row][col] == PercepcionPlanta.PERCEPCION_3SOL);
=======
		return (matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL1
				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL2
				|| matriz[row][col] == PercepcionPlanta.PERCEPCION_GIRASOL3);
>>>>>>> jesica-develop
	}

	public int getContadorZombie() {
		return contadorZombie;
	}

	public void setContadorZombie(int contadorZombie) {
		this.contadorZombie = contadorZombie;
	}

	public int getZombieTotal() {
		return zombieTotal;
	}

	public void setZombieTotal(int zombieTotal) {
		this.zombieTotal = zombieTotal;
	}

	public int getZombiePercibidos() {
		return zombiePercibidos;
	}

	public void setZombiePercibidos(int zombiePercibidos) {
		this.zombiePercibidos = zombiePercibidos;
	}

	public int getCeldasVisitadasX() {
		return celdasVisitadasX;
	}

	public void setCeldasVisitadasX(int celdasVisitadasX) {
		this.celdasVisitadasX = celdasVisitadasX;
	}

	public int getCeldasVisitadasY() {
		return celdasVisitadasY;
	}

	public void setCeldasVisitadasY(int celdasVisitadasY) {
		this.celdasVisitadasY = celdasVisitadasY;
	}
	
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4035)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3635)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.ui 4 0 2022-05-09 13:30:45.050
!MESSAGE Unhandled event loop exception
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3034)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4035)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3635)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:31:36.987
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverAbajo extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;

        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
<<<<<<< HEAD
            	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row-1, col));
            	plantsState.setRowPosition(row-1);
            	plantsState.setmatrizPosition(row-1, col, PercepcionPlanta.PERCEPCION_VACIO);
            }
            else if(plantsState.getmatrizPosition(row-1, col) == PercepcionPlanta.PERCEPCION_VACIO) {

            	plantsState.setRowPosition(row-1);
                //agregar de plantar planta si tiene soles.
                return plantsState;
            }
=======
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
>>>>>>> jesica-develop
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row>0)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row-1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row-1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row-1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row-1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row-1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row-1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row-1);
                		plantsState.setmatrizPosition(row-1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row-1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }
      

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) {

        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row-1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row-1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row-1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row-1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row-1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row-1, col));
          		
            	// Atacar zombie 
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row-1, col))
            	{
            		
            		plantsState.setRowPosition(row-1);
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		plantsState.setmatrizPosition(row-1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setMatriz(row-1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
<<<<<<< HEAD
            
            }
            // Accion TomarSol
            else if(plantsState.haySol(row-1, col)) {
            	
            	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row-1, col));
            	plantsState.setRowPosition(row-1);
            	plantsState.setmatrizPosition(row-1, col, PercepcionPlanta.PERCEPCION_VACIO);
            	environmentState.setMatriz(row-1, col, PercepcionPlanta.PERCEPCION_VACIO);
=======
>>>>>>> jesica-develop
            }
            else {

            	         	
            	plantsState.setRowPosition(row-1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;
    }

	@Override
	public Double getCost() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String toString() {
		 return "Mover Abajo";
	}
}


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.initialReconcile(JavaReconcilingStrategy.java:189)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.initialReconcile(CompositeReconcilingStrategy.java:125)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.initialReconcile(JavaCompositeReconcilingStrategy.java:139)
	at org.eclipse.jface.text.reconciler.MonoReconciler.initialProcess(MonoReconciler.java:98)
	at org.eclipse.jdt.internal.ui.text.JavaReconciler.initialProcess(JavaReconciler.java:421)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:177)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-09 13:31:36.990
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.initialReconcile(JavaReconcilingStrategy.java:189)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.initialReconcile(CompositeReconcilingStrategy.java:125)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.initialReconcile(JavaCompositeReconcilingStrategy.java:139)
	at org.eclipse.jface.text.reconciler.MonoReconciler.initialProcess(MonoReconciler.java:98)
	at org.eclipse.jdt.internal.ui.text.JavaReconciler.initialProcess(JavaReconciler.java:421)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:177)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-09 13:31:36.991
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.initialReconcile(JavaReconcilingStrategy.java:189)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.initialReconcile(CompositeReconcilingStrategy.java:125)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.initialReconcile(JavaCompositeReconcilingStrategy.java:139)
	at org.eclipse.jface.text.reconciler.MonoReconciler.initialProcess(MonoReconciler.java:98)
	at org.eclipse.jdt.internal.ui.text.JavaReconciler.initialProcess(JavaReconciler.java:421)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:177)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:31:43.422
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverAbajo extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;

        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
<<<<<<< HEAD
            	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row-1, col));
            	plantsState.setRowPosition(row-1);
            	plantsState.setmatrizPosition(row-1, col, PercepcionPlanta.PERCEPCION_VACIO);
            }
            else if(plantsState.getmatrizPosition(row-1, col) == PercepcionPlanta.PERCEPCION_VACIO) {

            	plantsState.setRowPosition(row-1);
                //agregar de plantar planta si tiene soles.
                return plantsState;
            }
=======
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
>>>>>>> jesica-develop
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row>0)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row-1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row-1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row-1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row-1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row-1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row-1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row-1);
                		plantsState.setmatrizPosition(row-1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row-1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }
      

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) {

        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row-1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row-1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row-1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row-1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row-1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row-1, col));
          		
            	// Atacar zombie 
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row-1, col))
            	{
            		
            		plantsState.setRowPosition(row-1);
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		plantsState.setmatrizPosition(row-1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setMatriz(row-1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}

>>>>>>> jesica-develop
            }
            else {

            	         	
            	plantsState.setRowPosition(row-1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;
    }

	@Override
	public Double getCost() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String toString() {
		 return "Mover Abajo";
	}
}


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-09 13:31:43.424
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-09 13:31:43.426
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:31:44.488
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverAbajo extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;

        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
<<<<<<< HEAD
            	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row-1, col));
            	plantsState.setRowPosition(row-1);
            	plantsState.setmatrizPosition(row-1, col, PercepcionPlanta.PERCEPCION_VACIO);
            }
            else if(plantsState.getmatrizPosition(row-1, col) == PercepcionPlanta.PERCEPCION_VACIO) {

            	plantsState.setRowPosition(row-1);
                //agregar de plantar planta si tiene soles.
                return plantsState;
            }
=======
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
>>>>>>> jesica-develop
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row>0)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row-1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row-1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row-1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row-1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row-1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row-1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row-1);
                		plantsState.setmatrizPosition(row-1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row-1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }
      

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) {

        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row-1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row-1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row-1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row-1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row-1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row-1, col));
          		
            	// Atacar zombie 
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row-1, col))
            	{
            		
            		plantsState.setRowPosition(row-1);
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		plantsState.setmatrizPosition(row-1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setMatriz(row-1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
>>>>>>> jesica-develop
            }
            else {

            	         	
            	plantsState.setRowPosition(row-1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;
    }

	@Override
	public Double getCost() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String toString() {
		 return "Mover Abajo";
	}
}


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-09 13:31:44.489
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-09 13:31:44.490
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:32:12.707
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverArriba extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;
        
        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

<<<<<<< HEAD
        // Accion TomarSol
        if(plantsState.haySol(row,col))
        {
        	plantsState.incrementarSol(row, col);
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);       		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        //Accion Plantar Girasol --- Plantar cada vez que encuentre una casilla vacia
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        {
            plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
        }
        else if(row < 4) 
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
            	// Atacar zombie 
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		plantsState.setRowPosition(row+1);
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            	}
            
            }
        	else {
        		plantsState.setRowPosition(row+1);
        	}
        }
        else {
        	return null;
        }
        	
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
		return plantsState;
    }
     
=======
       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row<4)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row+1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row+1);
                		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row+1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }
      
>>>>>>> jesica-develop

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) 
    {
        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];
<<<<<<< HEAD
        System.out.println("Execute Ambiente Row:"+row+"  Col:"+col);
        //Controla que hay en la casilla donde el agente se encuentra
        if(plantsState.haySol(row,col)) 
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
      		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
        		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        //Plantar cada vez que encuentre una casilla vacia
        {
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		
        }
        else if(row < 4) //row va de 0 a 4
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        	{
        		// Atacar zombie 
=======

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row+1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
          		
            	// Atacar zombie 
>>>>>>> jesica-develop
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		
            		plantsState.setRowPosition(row+1);
<<<<<<< HEAD
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
=======
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
>>>>>>> jesica-develop
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
            		environmentState.setMatriz(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
<<<<<<< HEAD
            		
            	}
         	}
        	else 
        	{
        		plantsState.setRowPosition(row+1);
        		
        	}
        }
        else {
        	return null;
        }
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
    	environmentState.setCeldasVisitadas(plantsState.getCeldasVisitadas());
    	
    	return environmentState; 
=======
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
            }
            else {

            	         	
            	plantsState.setRowPosition(row+1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;
>>>>>>> jesica-develop
    }
    @Override
    public Double getCost() {
        return new Double(0);
    }

    @Override
    public String toString() {
        return "Mover Arriba";
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.initialReconcile(JavaReconcilingStrategy.java:189)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.initialReconcile(CompositeReconcilingStrategy.java:125)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.initialReconcile(JavaCompositeReconcilingStrategy.java:139)
	at org.eclipse.jface.text.reconciler.MonoReconciler.initialProcess(MonoReconciler.java:98)
	at org.eclipse.jdt.internal.ui.text.JavaReconciler.initialProcess(JavaReconciler.java:421)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:177)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-09 13:32:12.708
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.initialReconcile(JavaReconcilingStrategy.java:189)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.initialReconcile(CompositeReconcilingStrategy.java:125)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.initialReconcile(JavaCompositeReconcilingStrategy.java:139)
	at org.eclipse.jface.text.reconciler.MonoReconciler.initialProcess(MonoReconciler.java:98)
	at org.eclipse.jdt.internal.ui.text.JavaReconciler.initialProcess(JavaReconciler.java:421)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:177)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-09 13:32:12.709
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.initialReconcile(JavaReconcilingStrategy.java:189)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.initialReconcile(CompositeReconcilingStrategy.java:125)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.initialReconcile(JavaCompositeReconcilingStrategy.java:139)
	at org.eclipse.jface.text.reconciler.MonoReconciler.initialProcess(MonoReconciler.java:98)
	at org.eclipse.jdt.internal.ui.text.JavaReconciler.initialProcess(JavaReconciler.java:421)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:177)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:32:36.435
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverArriba extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;
        
        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();


       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row<4)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row+1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row+1);
                		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row+1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }
      
>>>>>>> jesica-develop

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) 
    {
        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];
<<<<<<< HEAD
        System.out.println("Execute Ambiente Row:"+row+"  Col:"+col);
        //Controla que hay en la casilla donde el agente se encuentra
        if(plantsState.haySol(row,col)) 
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
      		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
        		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        //Plantar cada vez que encuentre una casilla vacia
        {
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		
        }
        else if(row < 4) //row va de 0 a 4
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        	{
        		// Atacar zombie 
=======

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row+1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
          		
            	// Atacar zombie 
>>>>>>> jesica-develop
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		
            		plantsState.setRowPosition(row+1);
<<<<<<< HEAD
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
=======
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
>>>>>>> jesica-develop
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
            		environmentState.setMatriz(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
<<<<<<< HEAD
            		
            	}
         	}
        	else 
        	{
        		plantsState.setRowPosition(row+1);
        		
        	}
        }
        else {
        	return null;
        }
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
    	environmentState.setCeldasVisitadas(plantsState.getCeldasVisitadas());
    	
    	return environmentState; 
=======
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
            }
            else {

            	         	
            	plantsState.setRowPosition(row+1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;
>>>>>>> jesica-develop
    }
    @Override
    public Double getCost() {
        return new Double(0);
    }

    @Override
    public String toString() {
        return "Mover Arriba";
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-09 13:32:36.437
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-09 13:32:36.438
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:32:37.469
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverArriba extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;
        
        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row<4)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row+1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row+1);
                		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row+1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }
      
>>>>>>> jesica-develop

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) 
    {
        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];
<<<<<<< HEAD
        System.out.println("Execute Ambiente Row:"+row+"  Col:"+col);
        //Controla que hay en la casilla donde el agente se encuentra
        if(plantsState.haySol(row,col)) 
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
      		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
        		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        //Plantar cada vez que encuentre una casilla vacia
        {
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		
        }
        else if(row < 4) //row va de 0 a 4
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        	{
        		// Atacar zombie 
=======

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row+1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
          		
            	// Atacar zombie 
>>>>>>> jesica-develop
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		
            		plantsState.setRowPosition(row+1);
<<<<<<< HEAD
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
=======
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
>>>>>>> jesica-develop
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
            		environmentState.setMatriz(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
<<<<<<< HEAD
            		
            	}
         	}
        	else 
        	{
        		plantsState.setRowPosition(row+1);
        		
        	}
        }
        else {
        	return null;
        }
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
    	environmentState.setCeldasVisitadas(plantsState.getCeldasVisitadas());
    	
    	return environmentState; 
=======
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
            }
            else {

            	         	
            	plantsState.setRowPosition(row+1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;
>>>>>>> jesica-develop
    }
    @Override
    public Double getCost() {
        return new Double(0);
    }

    @Override
    public String toString() {
        return "Mover Arriba";
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-09 13:32:37.471
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-09 13:32:37.471
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:32:44.245
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverArriba extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;
        
        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row<4)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row+1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row+1);
                		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row+1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }
 

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) 
    {
        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];
<<<<<<< HEAD
        System.out.println("Execute Ambiente Row:"+row+"  Col:"+col);
        //Controla que hay en la casilla donde el agente se encuentra
        if(plantsState.haySol(row,col)) 
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
      		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
        		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        //Plantar cada vez que encuentre una casilla vacia
        {
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		
        }
        else if(row < 4) //row va de 0 a 4
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        	{
        		// Atacar zombie 
=======

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row+1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
          		
            	// Atacar zombie 
>>>>>>> jesica-develop
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		
            		plantsState.setRowPosition(row+1);
<<<<<<< HEAD
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
=======
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
>>>>>>> jesica-develop
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
            		environmentState.setMatriz(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
<<<<<<< HEAD
            		
            	}
         	}
        	else 
        	{
        		plantsState.setRowPosition(row+1);
        		
        	}
        }
        else {
        	return null;
        }
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
    	environmentState.setCeldasVisitadas(plantsState.getCeldasVisitadas());
    	
    	return environmentState; 
=======
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
            }
            else {

            	         	
            	plantsState.setRowPosition(row+1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;
>>>>>>> jesica-develop
    }
    @Override
    public Double getCost() {
        return new Double(0);
    }

    @Override
    public String toString() {
        return "Mover Arriba";
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-09 13:32:44.246
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-09 13:32:44.246
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:32:44.272
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverArriba extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;
        
        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row<4)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row+1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row+1);
                		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row+1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }
 

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) 
    {
        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];
<<<<<<< HEAD
        System.out.println("Execute Ambiente Row:"+row+"  Col:"+col);
        //Controla que hay en la casilla donde el agente se encuentra
        if(plantsState.haySol(row,col)) 
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
      		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
        		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        //Plantar cada vez que encuentre una casilla vacia
        {
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		
        }
        else if(row < 4) //row va de 0 a 4
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        	{
        		// Atacar zombie 
=======

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row+1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
          		
            	// Atacar zombie 
>>>>>>> jesica-develop
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		
            		plantsState.setRowPosition(row+1);
<<<<<<< HEAD
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
=======
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
>>>>>>> jesica-develop
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
            		environmentState.setMatriz(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
<<<<<<< HEAD
            		
            	}
         	}
        	else 
        	{
        		plantsState.setRowPosition(row+1);
        		
        	}
        }
        else {
        	return null;
        }
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
    	environmentState.setCeldasVisitadas(plantsState.getCeldasVisitadas());
    	
    	return environmentState; 
=======
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
            }
            else {

            	         	
            	plantsState.setRowPosition(row+1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;
>>>>>>> jesica-develop
    }
    @Override
    public Double getCost() {
        return new Double(0);
    }

    @Override
    public String toString() {
        return "Mover Arriba";
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4035)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3635)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-09 13:32:44.274
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4035)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3635)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-09 13:32:44.274
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4035)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3635)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:32:44.298
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverArriba extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;
        
        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row<4)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row+1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row+1);
                		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row+1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }
 

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) 
    {
        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];
<<<<<<< HEAD
        System.out.println("Execute Ambiente Row:"+row+"  Col:"+col);
        //Controla que hay en la casilla donde el agente se encuentra
        if(plantsState.haySol(row,col)) 
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
      		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
        		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        //Plantar cada vez que encuentre una casilla vacia
        {
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		
        }
        else if(row < 4) //row va de 0 a 4
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        	{
        		// Atacar zombie 
=======

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row+1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
          		
            	// Atacar zombie 
>>>>>>> jesica-develop
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		
            		plantsState.setRowPosition(row+1);
<<<<<<< HEAD
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
=======
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
>>>>>>> jesica-develop
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
            		environmentState.setMatriz(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
<<<<<<< HEAD
            		
            	}
         	}
        	else 
        	{
        		plantsState.setRowPosition(row+1);
        		
        	}
        }
        else {
        	return null;
        }
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
    	environmentState.setCeldasVisitadas(plantsState.getCeldasVisitadas());
    	
    	return environmentState; 
=======
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
            }
            else {

            	         	
            	plantsState.setRowPosition(row+1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;
>>>>>>> jesica-develop
    }
    @Override
    public Double getCost() {
        return new Double(0);
    }

    @Override
    public String toString() {
        return "Mover Arriba";
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4035)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3635)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.ui 4 0 2022-05-09 13:32:44.300
!MESSAGE Unhandled event loop exception
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4035)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3635)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:32:45.122
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverArriba extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;
        
        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row<4)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row+1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row+1);
                		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row+1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }


    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) 
    {
        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];
<<<<<<< HEAD
        System.out.println("Execute Ambiente Row:"+row+"  Col:"+col);
        //Controla que hay en la casilla donde el agente se encuentra
        if(plantsState.haySol(row,col)) 
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
      		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
        		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        //Plantar cada vez que encuentre una casilla vacia
        {
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		
        }
        else if(row < 4) //row va de 0 a 4
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        	{
        		// Atacar zombie 
=======

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row+1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
          		
            	// Atacar zombie 
>>>>>>> jesica-develop
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		
            		plantsState.setRowPosition(row+1);
<<<<<<< HEAD
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
=======
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
>>>>>>> jesica-develop
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
            		environmentState.setMatriz(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
<<<<<<< HEAD
            		
            	}
         	}
        	else 
        	{
        		plantsState.setRowPosition(row+1);
        		
        	}
        }
        else {
        	return null;
        }
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
    	environmentState.setCeldasVisitadas(plantsState.getCeldasVisitadas());
    	
    	return environmentState; 
=======
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
            }
            else {

            	         	
            	plantsState.setRowPosition(row+1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;
>>>>>>> jesica-develop
    }
    @Override
    public Double getCost() {
        return new Double(0);
    }

    @Override
    public String toString() {
        return "Mover Arriba";
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-09 13:32:45.123
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-09 13:32:45.124
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:32:45.720
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverArriba extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;
        
        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row<4)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row+1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row+1);
                		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row+1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) 
    {
        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];
<<<<<<< HEAD
        System.out.println("Execute Ambiente Row:"+row+"  Col:"+col);
        //Controla que hay en la casilla donde el agente se encuentra
        if(plantsState.haySol(row,col)) 
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
      		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
        		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        //Plantar cada vez que encuentre una casilla vacia
        {
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		
        }
        else if(row < 4) //row va de 0 a 4
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        	{
        		// Atacar zombie 
=======

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row+1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
          		
            	// Atacar zombie 
>>>>>>> jesica-develop
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		
            		plantsState.setRowPosition(row+1);
<<<<<<< HEAD
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
=======
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
>>>>>>> jesica-develop
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
            		environmentState.setMatriz(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
<<<<<<< HEAD
            		
            	}
         	}
        	else 
        	{
        		plantsState.setRowPosition(row+1);
        		
        	}
        }
        else {
        	return null;
        }
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
    	environmentState.setCeldasVisitadas(plantsState.getCeldasVisitadas());
    	
    	return environmentState; 
=======
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
            }
            else {

            	         	
            	plantsState.setRowPosition(row+1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;
>>>>>>> jesica-develop
    }
    @Override
    public Double getCost() {
        return new Double(0);
    }

    @Override
    public String toString() {
        return "Mover Arriba";
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-09 13:32:45.721
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-09 13:32:45.722
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:32:50.170
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverArriba extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;
        
        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row<4)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row+1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row+1);
                		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row+1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) 
    {
        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];
<<<<<<< HEAD
        System.out.println("Execute Ambiente Row:"+row+"  Col:"+col);
        //Controla que hay en la casilla donde el agente se encuentra
        if(plantsState.haySol(row,col)) 
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
      		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
        		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        //Plantar cada vez que encuentre una casilla vacia
        {
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		
        }
        else if(row < 4) //row va de 0 a 4
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        	{
        		// Atacar zombie 
=======

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row+1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
          		
            	// Atacar zombie 
>>>>>>> jesica-develop
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		
            		plantsState.setRowPosition(row+1);
<<<<<<< HEAD
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
=======
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
>>>>>>> jesica-develop
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
            		environmentState.setMatriz(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
<<<<<<< HEAD
            		
            	}
         	}
        	else 
        	{
        		plantsState.setRowPosition(row+1);
        		
        	}
        }
        else {
        	return null;
        }
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
    	environmentState.setCeldasVisitadas(plantsState.getCeldasVisitadas());
    	
    	return environmentState; 
=======
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
            }
            else {

            	         	
            	plantsState.setRowPosition(row+1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;
>>>>>>> jesica-develop
    }
    @Override
    public Double getCost() {
        return new Double(0);
    }

    @Override
    public String toString() {
        return "Mover Arriba";
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-09 13:32:50.172
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-09 13:32:50.174
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:32:50.243
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverArriba extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;
        
        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row<4)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row+1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row+1);
                		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row+1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) 
    {
        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];
<<<<<<< HEAD
        System.out.println("Execute Ambiente Row:"+row+"  Col:"+col);
        //Controla que hay en la casilla donde el agente se encuentra
        if(plantsState.haySol(row,col)) 
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
      		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
        		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        //Plantar cada vez que encuentre una casilla vacia
        {
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		
        }
        else if(row < 4) //row va de 0 a 4
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        	{
        		// Atacar zombie 
=======

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row+1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
          		
            	// Atacar zombie 
>>>>>>> jesica-develop
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		
            		plantsState.setRowPosition(row+1);
<<<<<<< HEAD
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
=======
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
>>>>>>> jesica-develop
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
            		environmentState.setMatriz(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
<<<<<<< HEAD
            		
            	}
         	}
        	else 
        	{
        		plantsState.setRowPosition(row+1);
        		
        	}
        }
        else {
        	return null;
        }
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
    	environmentState.setCeldasVisitadas(plantsState.getCeldasVisitadas());
    	
    	return environmentState; 
=======
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
            }
            else {

            	         	
            	plantsState.setRowPosition(row+1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;
>>>>>>> jesica-develop
    }
    @Override
    public Double getCost() {
        return new Double(0);
    }

    @Override
    public String toString() {
        return "Mover Arriba";
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-09 13:32:50.244
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-09 13:32:50.245
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:32:51.802
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverArriba extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;
        
        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row<4)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row+1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row+1);
                		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row+1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) 
    {
        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];
<<<<<<< HEAD
        System.out.println("Execute Ambiente Row:"+row+"  Col:"+col);
        //Controla que hay en la casilla donde el agente se encuentra
        if(plantsState.haySol(row,col)) 
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
      		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
        		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        //Plantar cada vez que encuentre una casilla vacia
        {
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		
        }
        else if(row < 4) //row va de 0 a 4
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        	{
        		// Atacar zombie 
=======

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row+1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
          		
            	// Atacar zombie 
>>>>>>> jesica-develop
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		
            		plantsState.setRowPosition(row+1);
<<<<<<< HEAD
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
=======
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
>>>>>>> jesica-develop
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
            		environmentState.setMatriz(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
<<<<<<< HEAD
            		
            	}
         	}
        	else 
        	{
        		plantsState.setRowPosition(row+1);
        		
        	}
        }
        else {
        	return null;
        }
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
    	environmentState.setCeldasVisitadas(plantsState.getCeldasVisitadas());
    	
    	return environmentState; 
=======
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
            }
            else {

            	         	
            	plantsState.setRowPosition(row+1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;
>>>>>>> jesica-develop
    }
    @Override
    public Double getCost() {
        return new Double(0);
    }

    @Override
    public String toString() {
        return "Mover Arriba";
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-09 13:32:51.803
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-09 13:32:51.804
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:32:52.925
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverArriba extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;
        
        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row<4)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row+1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row+1);
                		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row+1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) 
    {
        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];
<<<<<<< HEAD
        System.out.println("Execute Ambiente Row:"+row+"  Col:"+col);
        //Controla que hay en la casilla donde el agente se encuentra
        if(plantsState.haySol(row,col)) 
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
      		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
        		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        //Plantar cada vez que encuentre una casilla vacia
        {
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		
        }
        else if(row < 4) //row va de 0 a 4
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        	{
        		// Atacar zombie 
=======

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row+1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
          		
            	// Atacar zombie 
>>>>>>> jesica-develop
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		
            		plantsState.setRowPosition(row+1);
<<<<<<< HEAD
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
=======
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
>>>>>>> jesica-develop
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
            		environmentState.setMatriz(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
<<<<<<< HEAD
            		
            	}
         	}
        	else 
        	{
        		plantsState.setRowPosition(row+1);
        		
        	}
        }
        else {
        	return null;
        }
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
    	environmentState.setCeldasVisitadas(plantsState.getCeldasVisitadas());
    	
    	return environmentState; 
=======
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
            }
            else {

            	         	
            	plantsState.setRowPosition(row+1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;
>>>>>>> jesica-develop
    }
    @Override
    public Double getCost() {
        return new Double(0);
    }

    @Override
    public String toString() {
        return "Mover Arriba";
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-09 13:32:52.926
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-09 13:32:52.927
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:33:06.227
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverArriba extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;
        
        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row<4)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row+1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row+1);
                		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row+1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) 
    {
        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];
<<<<<<< HEAD
        System.out.println("Execute Ambiente Row:"+row+"  Col:"+col);
        //Controla que hay en la casilla donde el agente se encuentra
        if(plantsState.haySol(row,col)) 
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
      		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
        		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        //Plantar cada vez que encuentre una casilla vacia
        {
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		
        }
        else if(row < 4) //row va de 0 a 4
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        	{
        		// Atacar zombie 
=======

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row+1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
          		
            	// Atacar zombie 
>>>>>>> jesica-develop
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		
            		plantsState.setRowPosition(row+1);
<<<<<<< HEAD
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
=======
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
>>>>>>> jesica-develop
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
            		environmentState.setMatriz(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
<<<<<<< HEAD
            		
            	}
         	}
        	else 
        	{
        		plantsState.setRowPosition(row+1);
        		
        	}
        }
        else {
        	return null;
        }
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
    	environmentState.setCeldasVisitadas(plantsState.getCeldasVisitadas());
    	
    	return environmentState; 
=======
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
            }
            else {

            	         	
            	plantsState.setRowPosition(row+1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;
    }
    @Override
    public Double getCost() {
        return new Double(0);
    }

    @Override
    public String toString() {
        return "Mover Arriba";
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-09 13:33:06.228
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-09 13:33:06.230
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:33:11.583
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverArriba extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;
        
        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row<4)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row+1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row+1);
                		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row+1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) 
    {
        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];
<<<<<<< HEAD
        System.out.println("Execute Ambiente Row:"+row+"  Col:"+col);
        //Controla que hay en la casilla donde el agente se encuentra
        if(plantsState.haySol(row,col)) 
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
      		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
        		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        //Plantar cada vez que encuentre una casilla vacia
        {
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		
        }
        else if(row < 4) //row va de 0 a 4
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        	{
        		// Atacar zombie 
=======

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row+1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
          		
            	// Atacar zombie 
>>>>>>> jesica-develop
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		
            		plantsState.setRowPosition(row+1);
<<<<<<< HEAD
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
=======
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
>>>>>>> jesica-develop
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
            		environmentState.setMatriz(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
<<<<<<< HEAD
            		
            	}
         	}
        	else 
        	{
        		plantsState.setRowPosition(row+1);
        		
        	}
        }
        else {
        	return null;
        }
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
    	environmentState.setCeldasVisitadas(plantsState.getCeldasVisitadas());
    	
    	return environmentState; 
=======
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
            }
            else {

            	         	
            	plantsState.setRowPosition(row+1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
	return null;
    }
    @Override
    public Double getCost() {
        return new Double(0);
    }

    @Override
    public String toString() {
        return "Mover Arriba";
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-09 13:33:11.584
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-09 13:33:11.584
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:33:23.050
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverArriba extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;
        
        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row<4)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row+1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row+1);
                		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row+1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) 
    {
        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];
<<<<<<< HEAD
        System.out.println("Execute Ambiente Row:"+row+"  Col:"+col);
        //Controla que hay en la casilla donde el agente se encuentra
        if(plantsState.haySol(row,col)) 
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
      		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
        		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        //Plantar cada vez que encuentre una casilla vacia
        {
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		
        }
        else if(row < 4) //row va de 0 a 4
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        	{
        		// Atacar zombie 
=======

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row+1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
          		
            	// Atacar zombie 
>>>>>>> jesica-develop
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		
            		plantsState.setRowPosition(row+1);
<<<<<<< HEAD
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
=======
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
>>>>>>> jesica-develop
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
            		environmentState.setMatriz(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
<<<<<<< HEAD
            		
            	}
         	}
        	else 
        	{
        		plantsState.setRowPosition(row+1);
        		
        	}
        }
        else {
        	return null;
        }
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
    	environmentState.setCeldasVisitadas(plantsState.getCeldasVisitadas());
    	
    	return environmentState; 
=======
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
            }
            else {

            	         	
            	plantsState.setRowPosition(row+1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;

    }
    @Override
    public Double getCost() {
        return new Double(0);
    }

    @Override
    public String toString() {
        return "Mover Arriba";
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-09 13:33:23.052
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-09 13:33:23.053
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:33:24.165
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverArriba extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;
        
        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row<4)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row+1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row+1);
                		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row+1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) 
    {
        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];
<<<<<<< HEAD
        System.out.println("Execute Ambiente Row:"+row+"  Col:"+col);
        //Controla que hay en la casilla donde el agente se encuentra
        if(plantsState.haySol(row,col)) 
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
      		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
        		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        //Plantar cada vez que encuentre una casilla vacia
        {
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		
        }
        else if(row < 4) //row va de 0 a 4
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        	{
        		// Atacar zombie 
=======

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row+1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
          		
            	// Atacar zombie 
>>>>>>> jesica-develop
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		
            		plantsState.setRowPosition(row+1);
<<<<<<< HEAD
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
=======
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
>>>>>>> jesica-develop
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
            		environmentState.setMatriz(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
<<<<<<< HEAD
            		
            	}
         	}
        	else 
        	{
        		plantsState.setRowPosition(row+1);
        		
        	}
        }
        else {
        	return null;
        }
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
    	environmentState.setCeldasVisitadas(plantsState.getCeldasVisitadas());
    	
    	return environmentState; 
=======
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
            }
            else {

            	         	
            	plantsState.setRowPosition(row+1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;
>>>>>>> jesica-develop
    }
    @Override
    public Double getCost() {
        return new Double(0);
    }

    @Override
    public String toString() {
        return "Mover Arriba";
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-09 13:33:24.167
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-09 13:33:24.168
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:33:32.578
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverArriba extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;
        
        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row<4)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row+1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row+1);
                		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row+1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) 
    {
        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];
<<<<<<< HEAD
        System.out.println("Execute Ambiente Row:"+row+"  Col:"+col);
        //Controla que hay en la casilla donde el agente se encuentra
        if(plantsState.haySol(row,col)) 
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
      		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
        		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        //Plantar cada vez que encuentre una casilla vacia
        {
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		
        }
        else if(row < 4) //row va de 0 a 4
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        	{
        		// Atacar zombie 
=======

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row+1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
          		
            	// Atacar zombie 
>>>>>>> jesica-develop
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		
            		plantsState.setRowPosition(row+1);
<<<<<<< HEAD
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
=======
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
>>>>>>> jesica-develop
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
            		environmentState.setMatriz(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
<<<<<<< HEAD
            		
            	}
         	}
        	else 
        	{
        		plantsState.setRowPosition(row+1);
        		
        	}
        }
        else {
        	return null;
        }
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
    	environmentState.setCeldasVisitadas(plantsState.getCeldasVisitadas());
    	
    	return environmentState; 
=======
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
            }
            else {

            	         	
            	plantsState.setRowPosition(row+1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;
>>>>>>> jesica-develop
    }
    @Override
    public Double getCost() {
        return new Double(0);
    }

    @Override
    public String toString() {
        return "Mover Arriba";
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-09 13:33:32.580
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-09 13:33:32.580
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:33:35.677
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverArriba extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;
        
        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row<4)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row+1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row+1);
                		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row+1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) 
    {
        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];
<<<<<<< HEAD
        System.out.println("Execute Ambiente Row:"+row+"  Col:"+col);
        //Controla que hay en la casilla donde el agente se encuentra
        if(plantsState.haySol(row,col)) 
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
      		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
        		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        //Plantar cada vez que encuentre una casilla vacia
        {
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		
        }
        else if(row < 4) //row va de 0 a 4
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        	{
        		// Atacar zombie 
=======

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row+1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
          		
            	// Atacar zombie 
>>>>>>> jesica-develop
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		
            		plantsState.setRowPosition(row+1);
<<<<<<< HEAD
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
=======
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
>>>>>>> jesica-develop
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
            		environmentState.setMatriz(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());

=======
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
            }
            else {

            	         	
            	plantsState.setRowPosition(row+1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;
>>>>>>> jesica-develop
    }
    @Override
    public Double getCost() {
        return new Double(0);
    }

    @Override
    public String toString() {
        return "Mover Arriba";
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-09 13:33:35.678
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-09 13:33:35.679
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:33:36.248
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverArriba extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;
        
        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row<4)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row+1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row+1);
                		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row+1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) 
    {
        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];
<<<<<<< HEAD
        System.out.println("Execute Ambiente Row:"+row+"  Col:"+col);
        //Controla que hay en la casilla donde el agente se encuentra
        if(plantsState.haySol(row,col)) 
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
      		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
        		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        //Plantar cada vez que encuentre una casilla vacia
        {
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		
        }
        else if(row < 4) //row va de 0 a 4
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        	{
        		// Atacar zombie 
=======

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row+1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
          		
            	// Atacar zombie 
>>>>>>> jesica-develop
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		
            		plantsState.setRowPosition(row+1);
<<<<<<< HEAD
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
=======
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
>>>>>>> jesica-develop
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
            		environmentState.setMatriz(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
=======
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
            }
            else {

            	         	
            	plantsState.setRowPosition(row+1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;
>>>>>>> jesica-develop
    }
    @Override
    public Double getCost() {
        return new Double(0);
    }

    @Override
    public String toString() {
        return "Mover Arriba";
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-09 13:33:36.249
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-09 13:33:36.250
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:33:39.389
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverArriba extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;
        
        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row<4)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row+1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row+1);
                		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row+1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) 
    {
        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];
<<<<<<< HEAD
        System.out.println("Execute Ambiente Row:"+row+"  Col:"+col);
        //Controla que hay en la casilla donde el agente se encuentra
        if(plantsState.haySol(row,col)) 
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
      		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
        		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        //Plantar cada vez que encuentre una casilla vacia
        {
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		
        }
        else if(row < 4) //row va de 0 a 4
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        	{
        		// Atacar zombie 
=======

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row+1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
          		
            	// Atacar zombie 
>>>>>>> jesica-develop
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		
            		plantsState.setRowPosition(row+1);
<<<<<<< HEAD
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
=======
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
>>>>>>> jesica-develop
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
            		environmentState.setMatriz(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());

            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
            }
            else {

            	         	
            	plantsState.setRowPosition(row+1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;
>>>>>>> jesica-develop
    }
    @Override
    public Double getCost() {
        return new Double(0);
    }

    @Override
    public String toString() {
        return "Mover Arriba";
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-09 13:33:39.390
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-09 13:33:39.391
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:33:39.963
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverArriba extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;
        
        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row<4)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row+1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row+1);
                		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row+1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) 
    {
        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];
<<<<<<< HEAD
        System.out.println("Execute Ambiente Row:"+row+"  Col:"+col);
        //Controla que hay en la casilla donde el agente se encuentra
        if(plantsState.haySol(row,col)) 
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
      		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
        		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        //Plantar cada vez que encuentre una casilla vacia
        {
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		
        }
        else if(row < 4) //row va de 0 a 4
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        	{
        		// Atacar zombie 
=======

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row+1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
          		
            	// Atacar zombie 
>>>>>>> jesica-develop
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		
            		plantsState.setRowPosition(row+1);
<<<<<<< HEAD
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
=======
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
>>>>>>> jesica-develop
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
            		environmentState.setMatriz(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
            }
            else {

            	         	
            	plantsState.setRowPosition(row+1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;
>>>>>>> jesica-develop
    }
    @Override
    public Double getCost() {
        return new Double(0);
    }

    @Override
    public String toString() {
        return "Mover Arriba";
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-09 13:33:39.964
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-09 13:33:39.965
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:33:52.289
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverArriba extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;
        
        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row<4)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row+1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row+1);
                		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row+1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) 
    {
        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];
<<<<<<< HEAD
        System.out.println("Execute Ambiente Row:"+row+"  Col:"+col);
        //Controla que hay en la casilla donde el agente se encuentra
        if(plantsState.haySol(row,col)) 
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
      		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
        		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        //Plantar cada vez que encuentre una casilla vacia
        {
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		
        }
        else if(row < 4) //row va de 0 a 4
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        	{
        		// Atacar zombie 
=======

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row+1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
          		
            	// Atacar zombie 
>>>>>>> jesica-develop
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		
            		plantsState.setRowPosition(row+1);
<<<<<<< HEAD
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
=======
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
>>>>>>> jesica-develop
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
            		environmentState.setMatriz(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
            }
            else {

            	         	
            	plantsState.setRowPosition(row+1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;
>>>>>>> jesica-develop
    }
    @Override
    public Double getCost() {
        return new Double(0);
    }

    @Override
    public String toString() {
        return "Mover Arriba";
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-09 13:33:52.291
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-09 13:33:52.292
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:33:52.332
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverArriba extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;
        
        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row<4)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row+1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row+1);
                		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row+1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) 
    {
        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];
<<<<<<< HEAD
        System.out.println("Execute Ambiente Row:"+row+"  Col:"+col);
        //Controla que hay en la casilla donde el agente se encuentra
        if(plantsState.haySol(row,col)) 
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
      		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
        		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        //Plantar cada vez que encuentre una casilla vacia
        {
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		
        }
        else if(row < 4) //row va de 0 a 4
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        	{
        		// Atacar zombie 
=======

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row+1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
          		
            	// Atacar zombie 
>>>>>>> jesica-develop
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		
            		plantsState.setRowPosition(row+1);
<<<<<<< HEAD
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
=======
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
>>>>>>> jesica-develop
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
            		environmentState.setMatriz(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
            }
            else {

            	         	
            	plantsState.setRowPosition(row+1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;
>>>>>>> jesica-develop
    }
    @Override
    public Double getCost() {
        return new Double(0);
    }

    @Override
    public String toString() {
        return "Mover Arriba";
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-09 13:33:52.333
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-09 13:33:52.333
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:33:53.786
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverArriba extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;
        
        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

<<<<<<< HEAD
        // Accion TomarSol
        if(plantsState.haySol(row,col))
        {
        	plantsState.incrementarSol(row, col);
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);       		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        //Accion Plantar Girasol --- Plantar cada vez que encuentre una casilla vacia
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        {
            plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
        }
        else if(row < 4) 
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
            	// Atacar zombie 
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		plantsState.setRowPosition(row+1);
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            	}
            
            }
        	else {
        		plantsState.setRowPosition(row+1);
        	}
        }
        else {
        	return null;
        }
        	
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
		return plantsState;
    }
     
=======
       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row<4)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row+1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row+1);
                		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row+1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }
      
>>>>>>> jesica-develop

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) 
    {
        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];
<<<<<<< HEAD
        System.out.println("Execute Ambiente Row:"+row+"  Col:"+col);
        //Controla que hay en la casilla donde el agente se encuentra
        if(plantsState.haySol(row,col)) 
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
      		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
        		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        //Plantar cada vez que encuentre una casilla vacia
        {
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		
        }
        else if(row < 4) //row va de 0 a 4
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        	{
        		// Atacar zombie 
=======

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row+1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
          		
            	// Atacar zombie 
>>>>>>> jesica-develop
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		
            		plantsState.setRowPosition(row+1);
<<<<<<< HEAD
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
=======
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
>>>>>>> jesica-develop
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
            		environmentState.setMatriz(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
<<<<<<< HEAD
            		
            	}
         	}
        	else 
        	{
        		plantsState.setRowPosition(row+1);
        		
        	}
        }
        else {
        	return null;
        }
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
    	environmentState.setCeldasVisitadas(plantsState.getCeldasVisitadas());
    	
    	return environmentState; 
=======
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
            }
            else {

            	         	
            	plantsState.setRowPosition(row+1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;
>>>>>>> jesica-develop
    }
    @Override
    public Double getCost() {
        return new Double(0);
    }

    @Override
    public String toString() {
        return "Mover Arriba";
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-05-09 13:33:53.788
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-05-09 13:33:53.789
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:34:40.792
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverArriba extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;
        
        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

<<<<<<< HEAD
        // Accion TomarSol
        if(plantsState.haySol(row,col))
        {
        	plantsState.incrementarSol(row, col);
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);       		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        //Accion Plantar Girasol --- Plantar cada vez que encuentre una casilla vacia
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        {
            plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
        }
        else if(row < 4) 
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
            	// Atacar zombie 
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		plantsState.setRowPosition(row+1);
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            	}
            
            }
        	else {
        		plantsState.setRowPosition(row+1);
        	}
        }
        else {
        	return null;
        }
        	
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
		return plantsState;
    }
     
=======
       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row<4)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row+1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row+1);
                		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row+1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }
      
>>>>>>> jesica-develop

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) 
    {
        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];
<<<<<<< HEAD
        System.out.println("Execute Ambiente Row:"+row+"  Col:"+col);
        //Controla que hay en la casilla donde el agente se encuentra
        if(plantsState.haySol(row,col)) 
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
      		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
        		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        //Plantar cada vez que encuentre una casilla vacia
        {
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		
        }
        else if(row < 4) //row va de 0 a 4
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        	{
        		// Atacar zombie 
=======

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row+1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
          		
            	// Atacar zombie 
>>>>>>> jesica-develop
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		
            		plantsState.setRowPosition(row+1);
<<<<<<< HEAD
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
=======
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
>>>>>>> jesica-develop
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
            		environmentState.setMatriz(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
<<<<<<< HEAD
            		
            	}
         	}
        	else 
        	{
        		plantsState.setRowPosition(row+1);
        		
        	}
        }
        else {
        	return null;
        }
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
    	environmentState.setCeldasVisitadas(plantsState.getCeldasVisitadas());
    	
    	return environmentState; 
=======
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
            }
            else {

            	         	
            	plantsState.setRowPosition(row+1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;
>>>>>>> jesica-develop
    }
    @Override
    public Double getCost() {
        return new Double(0);
    }

    @Override
    public String toString() {
        return "Mover Arriba";
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4035)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3635)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-09 13:34:40.794
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4035)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3635)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-09 13:34:40.794
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4035)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3635)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:34:40.824
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverArriba extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;
        
        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

<<<<<<< HEAD
        // Accion TomarSol
        if(plantsState.haySol(row,col))
        {
        	plantsState.incrementarSol(row, col);
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);       		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        //Accion Plantar Girasol --- Plantar cada vez que encuentre una casilla vacia
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        {
            plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
        }
        else if(row < 4) 
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
            	// Atacar zombie 
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		plantsState.setRowPosition(row+1);
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            	}
            
            }
        	else {
        		plantsState.setRowPosition(row+1);
        	}
        }
        else {
        	return null;
        }
        	
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
		return plantsState;
    }
     
=======
       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row<4)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row+1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row+1);
                		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row+1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }
      
>>>>>>> jesica-develop

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) 
    {
        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];
<<<<<<< HEAD
        System.out.println("Execute Ambiente Row:"+row+"  Col:"+col);
        //Controla que hay en la casilla donde el agente se encuentra
        if(plantsState.haySol(row,col)) 
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
      		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
        		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        //Plantar cada vez que encuentre una casilla vacia
        {
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		
        }
        else if(row < 4) //row va de 0 a 4
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        	{
        		// Atacar zombie 
=======

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row+1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
          		
            	// Atacar zombie 
>>>>>>> jesica-develop
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		
            		plantsState.setRowPosition(row+1);
<<<<<<< HEAD
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
=======
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
>>>>>>> jesica-develop
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
            		environmentState.setMatriz(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
<<<<<<< HEAD
            		
            	}
         	}
        	else 
        	{
        		plantsState.setRowPosition(row+1);
        		
        	}
        }
        else {
        	return null;
        }
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
    	environmentState.setCeldasVisitadas(plantsState.getCeldasVisitadas());
    	
    	return environmentState; 
=======
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
            }
            else {

            	         	
            	plantsState.setRowPosition(row+1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;
>>>>>>> jesica-develop
    }
    @Override
    public Double getCost() {
        return new Double(0);
    }

    @Override
    public String toString() {
        return "Mover Arriba";
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4035)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3635)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.ui 4 0 2022-05-09 13:34:40.826
!MESSAGE Unhandled event loop exception
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4035)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3635)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:34:41.799
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverArriba extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;
        
        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

<<<<<<< HEAD
        // Accion TomarSol
        if(plantsState.haySol(row,col))
        {
        	plantsState.incrementarSol(row, col);
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);       		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        //Accion Plantar Girasol --- Plantar cada vez que encuentre una casilla vacia
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        {
            plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
        }
        else if(row < 4) 
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
            	// Atacar zombie 
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		plantsState.setRowPosition(row+1);
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            	}
            
            }
        	else {
        		plantsState.setRowPosition(row+1);
        	}
        }
        else {
        	return null;
        }
        	
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
		return plantsState;
    }
     
=======
       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row<4)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row+1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row+1);
                		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row+1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }
      
>>>>>>> jesica-develop

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) 
    {
        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];
<<<<<<< HEAD
        System.out.println("Execute Ambiente Row:"+row+"  Col:"+col);
        //Controla que hay en la casilla donde el agente se encuentra
        if(plantsState.haySol(row,col)) 
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
      		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
        		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        //Plantar cada vez que encuentre una casilla vacia
        {
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		
        }
        else if(row < 4) //row va de 0 a 4
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        	{
        		// Atacar zombie 
=======

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row+1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
          		
            	// Atacar zombie 
>>>>>>> jesica-develop
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		
            		plantsState.setRowPosition(row+1);
<<<<<<< HEAD
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
=======
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
>>>>>>> jesica-develop
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
            		environmentState.setMatriz(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
<<<<<<< HEAD
            		
            	}
         	}
        	else 
        	{
        		plantsState.setRowPosition(row+1);
        		
        	}
        }
        else {
        	return null;
        }
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
    	environmentState.setCeldasVisitadas(plantsState.getCeldasVisitadas());
    	
    	return environmentState; 
=======
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
            }
            else {

            	         	
            	plantsState.setRowPosition(row+1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;
>>>>>>> jesica-develop
    }
    @Override
    public Double getCost() {
        return new Double(0);
    }

    @Override
    public String toString() {
        return "Mover Arriba";
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4035)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3635)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-05-09 13:34:41.800
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4035)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3635)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-05-09 13:34:41.801
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4035)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3635)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.jdt.core 4 4 2022-05-09 13:34:41.825
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverArriba extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;
        
        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

<<<<<<< HEAD
        // Accion TomarSol
        if(plantsState.haySol(row,col))
        {
        	plantsState.incrementarSol(row, col);
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);       		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        //Accion Plantar Girasol --- Plantar cada vez que encuentre una casilla vacia
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        {
            plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
        }
        else if(row < 4) 
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
            	// Atacar zombie 
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		plantsState.setRowPosition(row+1);
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            	}
            
            }
        	else {
        		plantsState.setRowPosition(row+1);
        	}
        }
        else {
        	return null;
        }
        	
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
		return plantsState;
    }
     
=======
       //agregar si hay zombie en la misma posicion descontar solZombie*2;
        
        if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		// Preguntar ala profe
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
            	
        		System.out.println("\n Agente State: "+plantsState+"\n");
            	return plantsState;
   
        	}
        	else {
        		return null;
        	}
        }
        else if(plantsState.haySol(row,col)) {
        
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
        	
        	System.out.println("\n Agente State: "+plantsState+"\n");
        	return plantsState;
      
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO)
        {
        	if(row<4)
        	{
        		if((col==0) 
        				&& plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO 
        				&& plantsState.getCantidadSol()>1)
        		{
	        			int valor = plantsState.numeroRandomGirasol();
	                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
	                	plantsState.setRowPosition(row+1);
	                	plantsState.setmatrizPosition(row, col, valor+5);
	   
	                	return plantsState;
        		
                }   
        		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
                		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
                {
        			
        			plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
                	// Atacar zombie 
                	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
                	{
                		// Preguntar ala profe
                		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
                		plantsState.setRowPosition(row+1);
                		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
                		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                		System.out.println("\n Agente State: "+plantsState+"\n");
                		
                		return plantsState;
           
                	}
                	else
                	{
                		return null;
                	}
                }
                else {

                	plantsState.setRowPosition(row+1);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	System.out.println("\n Agente State: "+plantsState+"\n");
                	return plantsState;
                }
        	}
        	else {
        		return null;
        	}
        }
		return null;
    }
      
>>>>>>> jesica-develop

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) 
    {
        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);
       

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];
<<<<<<< HEAD
        System.out.println("Execute Ambiente Row:"+row+"  Col:"+col);
        //Controla que hay en la casilla donde el agente se encuentra
        if(plantsState.haySol(row,col)) 
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
      		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
        		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        //Plantar cada vez que encuentre una casilla vacia
        {
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		
        }
        else if(row < 4) //row va de 0 a 4
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        	{
        		// Atacar zombie 
=======

    	if(plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
    		// Atacar zombie 
        	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row, col)*2)
        	{
        		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2);
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
 
            	return environmentState;
   
        	}
        	else {
        		return null;
        	}
        }
    	else if(plantsState.haySol(row,col)) {
    	        
         	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
         	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
         	environmentState.setCantidadSoles(plantsState.getCantidadSol());
         	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);         	
         	
         	System.out.println("\n Ambiente State: "+environmentState+"\n");
         	return environmentState;
       
        }
    	else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO) 
    	{
    		
    	if(row < 4) {
    		
    		if(plantsState.getmatrizPosition(row+1, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
    		{
    			if(col==0)
    			{
    				int valor = plantsState.numeroRandomGirasol();
                	plantsState.setCantidadSol(plantsState.getCantidadSol()-1);
                	plantsState.setmatrizPosition(row, col, valor+5);
                	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	plantsState.setRowPosition(row+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	environmentState.setCantidadSoles(plantsState.getCantidadSol());
                	environmentState.setMatriz(row+1, col, valor);

                	return environmentState;
    			}
    			
            }  
    		else if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
        		 
          		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
          		
            	// Atacar zombie 
>>>>>>> jesica-develop
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		
            		plantsState.setRowPosition(row+1);
<<<<<<< HEAD
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
=======
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
>>>>>>> jesica-develop
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
            		environmentState.setMatriz(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
<<<<<<< HEAD
            		
            	}
         	}
        	else 
        	{
        		plantsState.setRowPosition(row+1);
        		
        	}
        }
        else {
        	return null;
        }
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
    	environmentState.setCeldasVisitadas(plantsState.getCeldasVisitadas());
    	
    	return environmentState; 
=======
            		plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
                	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
                	//System.out.println("celdas visitadas: "+plantsState.getCeldasVisitadas()+" ---  "+plantsState.getContadorZombie()+"\n");
                    
                	return environmentState;                    		
            	}
            	else
            	{
            		return null;
            	}
            }
            else {

            	         	
            	plantsState.setRowPosition(row+1);
            	plantsState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY()+1);
            	plantsState.setZombiePercibidos(plantsState.getZombiePercibidos());
            	environmentState.setCeldasVisitadasY(plantsState.getCeldasVisitadasY());
            	environmentState.setZombiePercibido(plantsState.getZombiePercibidos());
            	System.out.println("\n Agente State: "+plantsState+"\n");
            	return environmentState;
            }
    	}
    	else {
    		return null;
    	}
    }
	return null;
>>>>>>> jesica-develop
    }
    @Override
    public Double getCost() {
        return new Double(0);
    }

    @Override
    public String toString() {
        return "Mover Arriba";
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4035)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3635)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)

!ENTRY org.eclipse.ui 4 0 2022-05-09 13:34:41.825
!MESSAGE Unhandled event loop exception
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4035)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3635)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)
!SESSION 2022-05-09 13:37:05.201 -----------------------------------------------
eclipse.buildId=4.23.0.I20220308-0310
java.version=11.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=es_AR
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-05-09 13:37:12.856
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-09 13:37:12.856
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@7c1c0892,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@1771d6a5,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-09 13:37:12.856
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@1d51b6a8,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2b18b308,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-05-09 13:37:18.012
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Yesii'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.ui.ide 4 4 2022-05-09 13:39:49.453
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:728)
	at com.genuitec.eclipse.webicons.IconImageDescriptor.createImage(IconImageDescriptor.java:46)
	at org.eclipse.jface.resource.ImageDescriptor.createImage(ImageDescriptor.java:290)
	at org.eclipse.jface.resource.ImageDescriptor.createImage(ImageDescriptor.java:268)
	at com.genuitec.eclipse.startup.splash.BasicSplashDialog.getTitleImage(BasicSplashDialog.java:198)
	at com.genuitec.eclipse.startup.splash.BasicSplashDialog.createImageComposite(BasicSplashDialog.java:177)
	at com.genuitec.eclipse.startup.splash.BasicSplashDialog.createContents(BasicSplashDialog.java:140)
	at org.eclipse.jface.window.Window.create(Window.java:431)
	at com.genuitec.eclipse.startup.dialogs.custom.CustomStartupDialog.setupSplash(CustomStartupDialog.java:142)
	at com.genuitec.eclipse.startup.dialogs.custom.CustomStartupDialog.prompt(CustomStartupDialog.java:362)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.ui.internal.ide.application.IDEApplication.showCustomDialog(IDEApplication.java:627)
	at org.eclipse.ui.internal.ide.application.IDEApplication.promptForWorkspace(IDEApplication.java:383)
	at org.eclipse.ui.internal.ide.application.IDEApplication.checkInstanceLocation(IDEApplication.java:285)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:142)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)
!SESSION 2022-05-10 15:06:32.272 -----------------------------------------------
eclipse.buildId=4.23.0.I20220308-0310
java.version=11.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=es_AR
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-05-10 15:06:43.857
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-10 15:06:43.857
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@45b2d17b,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@5243d730,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-10 15:06:43.857
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@15afebcc,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@68722de3,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-05-10 15:06:51.259
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Yesii'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY com.genuitec.eclipse.webclipse.evergreen 4 0 2022-05-10 15:06:52.459
!MESSAGE Unable to parse manifest from http://www.genuitec.com/updates/devstyle/ci/devstyle.json
!STACK 0
Unexpected character (<) at position 0.
	at org.json.simple.parser.Yylex.yylex(Yylex.java:610)
	at org.json.simple.parser.JSONParser.nextToken(JSONParser.java:269)
	at org.json.simple.parser.JSONParser.parse(JSONParser.java:118)
	at org.json.simple.parser.JSONParser.parse(JSONParser.java:81)
	at org.json.simple.parser.JSONParser.parse(JSONParser.java:75)
	at com.genuitec.eclipse.webclipse.evergreen.manifest.EvergreenManifestCache.updateManifestFromServer(EvergreenManifestCache.java:101)
	at com.genuitec.eclipse.webclipse.evergreen.internal.EvergreenManifestManager$ManifestUpdateJob.run(EvergreenManifestManager.java:139)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY com.genuitec.eclipse.theming.ui 4 0 2022-05-10 15:07:13.610
!MESSAGE Connection timed out: connect
!STACK 0
java.net.ConnectException: Connection timed out: connect
	at java.base/java.net.PlainSocketImpl.connect0(Native Method)
	at java.base/java.net.PlainSocketImpl.socketConnect(PlainSocketImpl.java:101)
	at java.base/java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:399)
	at java.base/java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:242)
	at java.base/java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:224)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.base/java.net.Socket.connect(Socket.java:608)
	at java.base/sun.security.ssl.SSLSocketImpl.connect(SSLSocketImpl.java:287)
	at java.base/sun.security.ssl.BaseSSLSocketImpl.connect(BaseSSLSocketImpl.java:173)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:182)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:474)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:569)
	at java.base/sun.net.www.protocol.https.HttpsClient.<init>(HttpsClient.java:265)
	at java.base/sun.net.www.protocol.https.HttpsClient.New(HttpsClient.java:372)
	at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.getNewHttpClient(AbstractDelegateHttpsURLConnection.java:191)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1187)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1081)
	at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:177)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1592)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1520)
	at java.base/java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:527)
	at java.base/sun.net.www.protocol.https.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:334)
	at com.genuitec.eclipse.theming.ui.IconDownloaderJob.getApprovedDefinitions(IconDownloaderJob.java:86)
	at com.genuitec.eclipse.theming.ui.IconDownloaderJob.run(IconDownloaderJob.java:52)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SESSION 2022-05-12 19:18:48.100 -----------------------------------------------
eclipse.buildId=4.23.0.I20220308-0310
java.version=11.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=es_AR
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-05-12 19:18:58.616
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-12 19:18:58.616
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3e755d5f,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@501b296a,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-12 19:18:58.616
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4202276,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2053b761,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-05-12 19:19:05.114
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Yesii'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-05-12 19:27:45.853 -----------------------------------------------
eclipse.buildId=4.23.0.I20220308-0310
java.version=11.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=es_AR
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-05-12 19:27:55.784
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-12 19:27:55.785
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4202276,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2053b761,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-12 19:27:55.785
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@34588991,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3d01b609,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-05-12 19:28:01.489
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Yesii'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-05-12 19:28:41.137
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-05-12 19:28:41.226
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 4 0 2022-05-12 19:28:43.386
!MESSAGE Launch configuration CaperucitaAgentMain references non-existing project juegoCaperucita.
!STACK 1
org.eclipse.core.runtime.CoreException: Launch configuration CaperucitaAgentMain references non-existing project juegoCaperucita.
	at org.eclipse.jdt.launching.JavaRuntime.abort(JavaRuntime.java:1861)
	at org.eclipse.jdt.launching.JavaRuntime.getJavaProject(JavaRuntime.java:1736)
	at org.eclipse.m2e.jdt.internal.launch.MavenLaunchConfigurationListener.updateLaunchConfiguration(MavenLaunchConfigurationListener.java:62)
	at org.eclipse.m2e.jdt.internal.launch.MavenLaunchConfigurationListener.launchConfigurationChanged(MavenLaunchConfigurationListener.java:48)
	at org.eclipse.debug.internal.core.LaunchManager$ConfigurationNotifier.run(LaunchManager.java:225)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.debug.internal.core.LaunchManager$ConfigurationNotifier.notify(LaunchManager.java:209)
	at org.eclipse.debug.internal.core.LaunchConfigurationWorkingCopy.setDirty(LaunchConfigurationWorkingCopy.java:523)
	at org.eclipse.debug.internal.core.LaunchConfigurationWorkingCopy.setAttribute(LaunchConfigurationWorkingCopy.java:411)
	at org.eclipse.m2e.jdt.internal.launch.MavenRuntimeClasspathProvider.disable(MavenRuntimeClasspathProvider.java:401)
	at org.eclipse.m2e.jdt.internal.launch.MavenRuntimeClasspathProvider.disable(MavenRuntimeClasspathProvider.java:427)
	at org.eclipse.m2e.jdt.internal.launch.MavenLaunchConfigurationListener.mavenProjectChanged(MavenLaunchConfigurationListener.java:134)
	at org.eclipse.m2e.core.internal.project.registry.ProjectRegistryManager.notifyProjectChangeListeners(ProjectRegistryManager.java:806)
	at org.eclipse.m2e.core.internal.project.registry.ProjectRegistryManager.applyMutableProjectRegistry(ProjectRegistryManager.java:972)
	at org.eclipse.m2e.core.internal.project.registry.ProjectRegistryRefreshJob.lambda$0(ProjectRegistryRefreshJob.java:148)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.executeBare(MavenExecutionContext.java:182)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:156)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:103)
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.execute(MavenImpl.java:1416)
	at org.eclipse.m2e.core.internal.project.registry.ProjectRegistryRefreshJob.run(ProjectRegistryRefreshJob.java:83)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SUBENTRY 1 org.eclipse.jdt.launching 4 107 2022-05-12 19:28:43.387
!MESSAGE Launch configuration CaperucitaAgentMain references non-existing project juegoCaperucita.

!ENTRY org.eclipse.m2e.logback.appender 4 0 2022-05-12 19:28:43.389
!MESSAGE Launch configuration CaperucitaAgentMain references non-existing project juegoCaperucita.
!STACK 1
org.eclipse.core.runtime.CoreException: Launch configuration CaperucitaAgentMain references non-existing project juegoCaperucita.
	at org.eclipse.jdt.launching.JavaRuntime.abort(JavaRuntime.java:1861)
	at org.eclipse.jdt.launching.JavaRuntime.getJavaProject(JavaRuntime.java:1736)
	at org.eclipse.m2e.jdt.internal.launch.MavenLaunchConfigurationListener.updateLaunchConfiguration(MavenLaunchConfigurationListener.java:62)
	at org.eclipse.m2e.jdt.internal.launch.MavenLaunchConfigurationListener.launchConfigurationChanged(MavenLaunchConfigurationListener.java:48)
	at org.eclipse.debug.internal.core.LaunchManager$ConfigurationNotifier.run(LaunchManager.java:225)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.debug.internal.core.LaunchManager$ConfigurationNotifier.notify(LaunchManager.java:209)
	at org.eclipse.debug.internal.core.LaunchConfigurationWorkingCopy.setDirty(LaunchConfigurationWorkingCopy.java:523)
	at org.eclipse.debug.internal.core.LaunchConfigurationWorkingCopy.setAttribute(LaunchConfigurationWorkingCopy.java:411)
	at org.eclipse.m2e.jdt.internal.launch.MavenRuntimeClasspathProvider.disable(MavenRuntimeClasspathProvider.java:402)
	at org.eclipse.m2e.jdt.internal.launch.MavenRuntimeClasspathProvider.disable(MavenRuntimeClasspathProvider.java:427)
	at org.eclipse.m2e.jdt.internal.launch.MavenLaunchConfigurationListener.mavenProjectChanged(MavenLaunchConfigurationListener.java:134)
	at org.eclipse.m2e.core.internal.project.registry.ProjectRegistryManager.notifyProjectChangeListeners(ProjectRegistryManager.java:806)
	at org.eclipse.m2e.core.internal.project.registry.ProjectRegistryManager.applyMutableProjectRegistry(ProjectRegistryManager.java:972)
	at org.eclipse.m2e.core.internal.project.registry.ProjectRegistryRefreshJob.lambda$0(ProjectRegistryRefreshJob.java:148)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.executeBare(MavenExecutionContext.java:182)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:156)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:103)
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.execute(MavenImpl.java:1416)
	at org.eclipse.m2e.core.internal.project.registry.ProjectRegistryRefreshJob.run(ProjectRegistryRefreshJob.java:83)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SUBENTRY 1 org.eclipse.jdt.launching 4 107 2022-05-12 19:28:43.389
!MESSAGE Launch configuration CaperucitaAgentMain references non-existing project juegoCaperucita.

!ENTRY org.eclipse.m2e.logback.appender 4 0 2022-05-12 19:28:43.393
!MESSAGE Launch configuration CaperucitaAgentMain references non-existing project juegoCaperucita.
!STACK 1
org.eclipse.core.runtime.CoreException: Launch configuration CaperucitaAgentMain references non-existing project juegoCaperucita.
	at org.eclipse.jdt.launching.JavaRuntime.abort(JavaRuntime.java:1861)
	at org.eclipse.jdt.launching.JavaRuntime.getJavaProject(JavaRuntime.java:1736)
	at org.eclipse.m2e.jdt.internal.launch.MavenLaunchConfigurationListener.updateLaunchConfiguration(MavenLaunchConfigurationListener.java:62)
	at org.eclipse.m2e.jdt.internal.launch.MavenLaunchConfigurationListener.launchConfigurationChanged(MavenLaunchConfigurationListener.java:48)
	at org.eclipse.debug.internal.core.LaunchManager$ConfigurationNotifier.run(LaunchManager.java:225)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.debug.internal.core.LaunchManager$ConfigurationNotifier.notify(LaunchManager.java:209)
	at org.eclipse.debug.internal.core.LaunchManager.launchConfigurationChanged(LaunchManager.java:2128)
	at org.eclipse.debug.internal.core.LaunchConfigurationWorkingCopy.writeNewFile(LaunchConfigurationWorkingCopy.java:376)
	at org.eclipse.debug.internal.core.LaunchConfigurationWorkingCopy.doSave0(LaunchConfigurationWorkingCopy.java:259)
	at org.eclipse.debug.internal.core.LaunchConfigurationWorkingCopy.doSave(LaunchConfigurationWorkingCopy.java:229)
	at org.eclipse.debug.internal.core.LaunchConfigurationWorkingCopy.doSave(LaunchConfigurationWorkingCopy.java:187)
	at org.eclipse.m2e.jdt.internal.launch.MavenRuntimeClasspathProvider.disable(MavenRuntimeClasspathProvider.java:403)
	at org.eclipse.m2e.jdt.internal.launch.MavenRuntimeClasspathProvider.disable(MavenRuntimeClasspathProvider.java:427)
	at org.eclipse.m2e.jdt.internal.launch.MavenLaunchConfigurationListener.mavenProjectChanged(MavenLaunchConfigurationListener.java:134)
	at org.eclipse.m2e.core.internal.project.registry.ProjectRegistryManager.notifyProjectChangeListeners(ProjectRegistryManager.java:806)
	at org.eclipse.m2e.core.internal.project.registry.ProjectRegistryManager.applyMutableProjectRegistry(ProjectRegistryManager.java:972)
	at org.eclipse.m2e.core.internal.project.registry.ProjectRegistryRefreshJob.lambda$0(ProjectRegistryRefreshJob.java:148)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.executeBare(MavenExecutionContext.java:182)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:156)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:103)
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.execute(MavenImpl.java:1416)
	at org.eclipse.m2e.core.internal.project.registry.ProjectRegistryRefreshJob.run(ProjectRegistryRefreshJob.java:83)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SUBENTRY 1 org.eclipse.jdt.launching 4 107 2022-05-12 19:28:43.393
!MESSAGE Launch configuration CaperucitaAgentMain references non-existing project juegoCaperucita.
!SESSION 2022-05-13 16:58:01.844 -----------------------------------------------
eclipse.buildId=4.23.0.I20220308-0310
java.version=11.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=es_AR
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.core.resources 2 10035 2022-05-13 16:58:06.983
!MESSAGE The workspace exited with unsaved changes in the previous session; refreshing workspace to recover changes.

!ENTRY org.eclipse.jface 2 0 2022-05-13 16:58:11.445
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-13 16:58:11.445
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@391b03b,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4a977146,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-13 16:58:11.445
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@41dc34c8,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@402c415e,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-05-13 16:58:17.089
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Yesii'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY com.genuitec.eclipse.webclipse.evergreen 4 0 2022-05-13 16:58:19.188
!MESSAGE Unable to parse manifest from http://www.genuitec.com/updates/devstyle/ci/devstyle.json
!STACK 0
Unexpected character (<) at position 0.
	at org.json.simple.parser.Yylex.yylex(Yylex.java:610)
	at org.json.simple.parser.JSONParser.nextToken(JSONParser.java:269)
	at org.json.simple.parser.JSONParser.parse(JSONParser.java:118)
	at org.json.simple.parser.JSONParser.parse(JSONParser.java:81)
	at org.json.simple.parser.JSONParser.parse(JSONParser.java:75)
	at com.genuitec.eclipse.webclipse.evergreen.manifest.EvergreenManifestCache.updateManifestFromServer(EvergreenManifestCache.java:101)
	at com.genuitec.eclipse.webclipse.evergreen.internal.EvergreenManifestManager$ManifestUpdateJob.run(EvergreenManifestManager.java:139)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY com.genuitec.eclipse.theming.ui 4 0 2022-05-13 16:58:39.910
!MESSAGE Software caused connection abort: connect
!STACK 0
java.net.SocketException: Software caused connection abort: connect
	at java.base/java.net.PlainSocketImpl.connect0(Native Method)
	at java.base/java.net.PlainSocketImpl.socketConnect(PlainSocketImpl.java:101)
	at java.base/java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:399)
	at java.base/java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:242)
	at java.base/java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:224)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.base/java.net.Socket.connect(Socket.java:608)
	at java.base/sun.security.ssl.SSLSocketImpl.connect(SSLSocketImpl.java:287)
	at java.base/sun.security.ssl.BaseSSLSocketImpl.connect(BaseSSLSocketImpl.java:173)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:182)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:474)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:569)
	at java.base/sun.net.www.protocol.https.HttpsClient.<init>(HttpsClient.java:265)
	at java.base/sun.net.www.protocol.https.HttpsClient.New(HttpsClient.java:372)
	at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.getNewHttpClient(AbstractDelegateHttpsURLConnection.java:191)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1187)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1081)
	at java.base/sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:177)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1592)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1520)
	at java.base/java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:527)
	at java.base/sun.net.www.protocol.https.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:334)
	at com.genuitec.eclipse.theming.ui.IconDownloaderJob.getApprovedDefinitions(IconDownloaderJob.java:86)
	at com.genuitec.eclipse.theming.ui.IconDownloaderJob.run(IconDownloaderJob.java:52)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SESSION 2022-05-17 17:45:46.082 -----------------------------------------------
eclipse.buildId=4.23.0.I20220308-0310
java.version=11.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=es_AR
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.core.resources 2 10035 2022-05-17 17:46:02.400
!MESSAGE The workspace exited with unsaved changes in the previous session; refreshing workspace to recover changes.

!ENTRY org.eclipse.jface 2 0 2022-05-17 17:46:17.702
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-17 17:46:17.702
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@1f847d9e,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3d00e981,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-17 17:46:17.702
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@6265a548,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2e51ede1,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-05-17 17:46:22.728
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Yesii'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.ui.ide 4 4 2022-05-17 18:09:44.434
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:728)
	at com.genuitec.eclipse.webicons.IconImageDescriptor.createImage(IconImageDescriptor.java:46)
	at org.eclipse.jface.resource.ImageDescriptor.createImage(ImageDescriptor.java:290)
	at org.eclipse.jface.resource.ImageDescriptor.createImage(ImageDescriptor.java:268)
	at com.genuitec.eclipse.startup.splash.BasicSplashDialog.getTitleImage(BasicSplashDialog.java:198)
	at com.genuitec.eclipse.startup.splash.BasicSplashDialog.createImageComposite(BasicSplashDialog.java:177)
	at com.genuitec.eclipse.startup.splash.BasicSplashDialog.createContents(BasicSplashDialog.java:140)
	at org.eclipse.jface.window.Window.create(Window.java:431)
	at com.genuitec.eclipse.startup.dialogs.custom.CustomStartupDialog.setupSplash(CustomStartupDialog.java:142)
	at com.genuitec.eclipse.startup.dialogs.custom.CustomStartupDialog.prompt(CustomStartupDialog.java:362)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.ui.internal.ide.application.IDEApplication.showCustomDialog(IDEApplication.java:627)
	at org.eclipse.ui.internal.ide.application.IDEApplication.promptForWorkspace(IDEApplication.java:383)
	at org.eclipse.ui.internal.ide.application.IDEApplication.checkInstanceLocation(IDEApplication.java:285)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:142)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1440)
!SESSION 2022-05-17 18:09:54.757 -----------------------------------------------
eclipse.buildId=4.23.0.I20220308-0310
java.version=11.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=es_AR
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-05-17 18:10:02.554
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-17 18:10:02.554
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@64d1f549,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@1fb61db4,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-17 18:10:02.554
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@1d4e06bb,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2eb9c7ad,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-05-17 18:10:07.901
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Yesii'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-05-17 20:16:22.837 -----------------------------------------------
eclipse.buildId=4.23.0.I20220308-0310
java.version=11.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=es_AR
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-05-17 20:16:31.592
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-17 20:16:31.592
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@1fb61db4,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@1d4e06bb,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-17 20:16:31.592
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2eb9c7ad,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4529048e,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-05-17 20:16:37.613
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Yesii'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-05-17 20:21:04.747 -----------------------------------------------
eclipse.buildId=4.23.0.I20220308-0310
java.version=11.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=es_AR
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-05-17 20:21:13.651
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-17 20:21:13.651
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@5e25085,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@758655a9,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-17 20:21:13.651
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@458704ee,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@45b2d17b,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-05-17 20:21:19.763
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Yesii'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-05-17 20:28:42.763 -----------------------------------------------
eclipse.buildId=4.23.0.I20220308-0310
java.version=11.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=es_AR
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-05-17 20:28:52.778
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-17 20:28:52.778
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3d01b609,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@38b7004d,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-05-17 20:28:52.778
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@5e25085,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@758655a9,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-05-17 20:28:58.167
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Yesii'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
