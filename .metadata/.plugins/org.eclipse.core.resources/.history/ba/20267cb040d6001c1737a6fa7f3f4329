package frsf.cidisi.exercise.plantsVsZombies.search.actions;

import frsf.cidisi.exercise.plantsVsZombies.search.EstadoPlanta;
import frsf.cidisi.exercise.plantsVsZombies.search.EstadoJardin;
import frsf.cidisi.exercise.plantsVsZombies.search.PercepcionPlanta;
import frsf.cidisi.faia.agent.search.SearchAction;
import frsf.cidisi.faia.agent.search.SearchBasedAgentState;
import frsf.cidisi.faia.state.AgentState;
import frsf.cidisi.faia.state.EnvironmentState;

public class MoverArriba extends SearchAction {

    @Override
    public SearchBasedAgentState execute(SearchBasedAgentState s) {

        EstadoPlanta plantsState = (EstadoPlanta) s;
        
        int row = plantsState.getRowPosition();
        int col = plantsState.getColumnPosition();

        // Accion TomarSol
        if(plantsState.haySol(row,col))
        {
        	plantsState.incrementarSol(row, col);
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);       		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        //Accion Plantar Girasol --- Plantar cada vez que encuentre una casilla vacia
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        {
            plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
        }
        else if(row < 4) 
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
            {
            	// Atacar zombie 
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		plantsState.setRowPosition(row+1);
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            	}
            
            }
        	else {
        		plantsState.setRowPosition(row+1);
        	}
        }
        else {
        	return null;
        }
        	
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
		return plantsState;
    }
     

    @Override
    public EnvironmentState execute(AgentState ast, EnvironmentState est) 
    {
        EstadoJardin environmentState = (EstadoJardin) est;
        EstadoPlanta plantsState = ((EstadoPlanta) ast);

        int row = environmentState.getPosicionAgente()[0];
        int col = environmentState.getPosicionAgente()[1];
        System.out.println("Execute Ambiente Row:"+row+"  Col:"+col);
        //Controla que hay en la casilla donde el agente se encuentra
        if(plantsState.haySol(row,col)) 
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()+plantsState.incrementarSol(row, col));
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        	environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
      		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        }
        else if (plantsState.getmatrizPosition(row, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
        		&& plantsState.getmatrizPosition(row, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        {
        	plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row, col)*2); //primero descuenta los soles del agente como penalizacion por estar en
        																										//en la misma casilla que un zombie
        	if(plantsState.getCantidadSol() > 0) //si es mayor que 0, el agente queda vivo.
        	{
        		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
        		plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setContadorZombie(plantsState.getContadorZombie());
        		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
        		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_VACIO);
        		environmentState.setCantidadSoles(plantsState.getCantidadSol());
        		
        	}
        	else 
        	{// TODO: pierde 
        		return null;
        	}
        }
        else if (plantsState.getmatrizPosition(row, col) == PercepcionPlanta.PERCEPCION_VACIO && plantsState.getCantidadSol()>1)
        //Plantar cada vez que encuentre una casilla vacia
        {
        	plantsState.setmatrizPosition(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		environmentState.setMatriz(row, col, PercepcionPlanta.PERCEPCION_GIRASOL);
    		
        }
        else if(row < 4) //row va de 0 a 4
        {
        	if(plantsState.getmatrizPosition(row+1, col) >= PercepcionPlanta.PERCEPCION_ENEMIGO1
            		&& plantsState.getmatrizPosition(row+1, col) <= PercepcionPlanta.PERCEPCION_ENEMIGO5)
        	{
        		// Atacar zombie 
            	if(plantsState.getCantidadSol() > plantsState.getmatrizPosition(row+1, col))
            	{
            		plantsState.setRowPosition(row+1);
            		plantsState.setCantidadSol(plantsState.getCantidadSol()-plantsState.getmatrizPosition(row+1, col));
            		plantsState.setContadorZombie(plantsState.getContadorZombie()+1);
            		plantsState.setmatrizPosition(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setContadorZombie(plantsState.getContadorZombie());
            		environmentState.setPosicionAgente(plantsState.getPosicionPlants());
            		environmentState.setMatriz(row+1, col, PercepcionPlanta.PERCEPCION_VACIO);
            		environmentState.setCantidadSoles(plantsState.getCantidadSol());
            		
            	}
         	}
        	else 
        	{
        		plantsState.setRowPosition(row+1);
        		
        	}
        }
        else {
        	return null;
        }
        plantsState.setCeldasVisitadas(plantsState.getCeldasVisitadas()+1);
    	environmentState.setCeldasVisitadas(plantsState.getCeldasVisitadas());
    	
    	return environmentState; 
    }

    @Override
    public Double getCost() {
        return new Double(0);
    }

    @Override
    public String toString() {
        return "Mover Arriba";
    }
}
